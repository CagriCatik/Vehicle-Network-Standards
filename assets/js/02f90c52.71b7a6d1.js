"use strict";(self.webpackChunkvns=self.webpackChunkvns||[]).push([[57784],{45333:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"UDS/capl/Programming-Session","title":"Programming Session - 0x10","description":"---","source":"@site/docs/UDS/06_capl/02_Programming-Session.md","sourceDirName":"UDS/06_capl","slug":"/UDS/capl/Programming-Session","permalink":"/Vehicle-Network-Standards/docs/UDS/capl/Programming-Session","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/UDS/06_capl/02_Programming-Session.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"udsSidebar","previous":{"title":"Tester Present - 0x3E","permalink":"/Vehicle-Network-Standards/docs/UDS/capl/Tester-Present"},"next":{"title":"Write Data by Identifier - 0x2E","permalink":"/Vehicle-Network-Standards/docs/UDS/capl/Write-Data-by-ID"}}');var r=s(74848),o=s(28453);const t={},a="Programming Session - 0x10",c={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Sequence of Communication",id:"sequence-of-communication",level:2},{value:"CAPL Implementation",id:"capl-implementation",level:2},{value:"Response Codes",id:"response-codes",level:2},{value:"Example Scenarios",id:"example-scenarios",level:2},{value:"Logging",id:"logging",level:2},{value:"Key Points",id:"key-points",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"programming-session---0x10",children:"Programming Session - 0x10"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsx)(n.p,{children:"The Programming Session Control service (0x10) is a part of the UDS (Unified Diagnostic Services) protocol. It is used to transition the ECU (Electronic Control Unit) to a specific diagnostic session, such as a programming session. This is essential for enabling tasks like writing to memory or flashing firmware."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Service ID: ",(0,r.jsx)(n.code,{children:"0x10"})]}),"\n",(0,r.jsx)(n.li,{children:"Purpose: Switches the ECU to a specified diagnostic session."}),"\n",(0,r.jsxs)(n.li,{children:["Subfunctions:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0x01"}),": Default Session"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0x02"}),": Programming Session"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0x03"}),": Extended Diagnostic Session"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"sequence-of-communication",children:"Sequence of Communication"}),"\n",(0,r.jsx)(n.p,{children:"Below is a sequence diagram to illustrate the flow of a Programming Session Control request and response:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-mermaid",children:"sequenceDiagram\n    participant Tester\n    participant ECU\n\n    Tester->>ECU: Diagnostic Session Control Request (0x10, Subfunction: 0x02)\n    ECU--\x3e>Tester: Positive Response (0x50, Subfunction: 0x02)\n    Note over ECU,Tester: ECU transitions to Programming Session\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"capl-implementation",children:"CAPL Implementation"}),"\n",(0,r.jsx)(n.p,{children:"Initialization"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-capl",children:"variables {\n  message programmingSessionMessage; // Message for Programming Session Control\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Request Trigger"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-capl",children:"on key 'P' {\n  // Prepare the Programming Session Control message\n  programmingSessionMessage.id = 0x1E0; // Replace with the correct ID for the ECU\n  programmingSessionMessage.dlc = 8;    // Data Length Code\n  programmingSessionMessage.byte(0) = 0x02; // Message length\n  programmingSessionMessage.byte(1) = 0x10; // Service ID\n  programmingSessionMessage.byte(2) = 0x02; // Subfunction: Programming Session\n\n  // Send the message to the ECU\n  output(programmingSessionMessage);\n  write(\"Programming Session Control message sent.\");\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Response Handling"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-capl",children:'on message 0x1E8 { // Replace with ECU response ID\n  if (this.byte(1) == 0x50 && this.byte(2) == 0x02) {\n    write("Positive Response: ECU is now in Programming Session.");\n  } else if (this.byte(1) == 0x7F) {\n    int nrc = this.byte(2); // Negative Response Code\n    switch (nrc) {\n      case 0x12:\n        write("NRC 0x12: Subfunction not supported.");\n        break;\n      case 0x13:\n        write("NRC 0x13: Incorrect message length or invalid format.");\n        break;\n      default:\n        writef("Unknown NRC: 0x%X", nrc);\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"response-codes",children:"Response Codes"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Response Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"0x50"})}),(0,r.jsx)(n.td,{children:"Positive response: ECU has switched to the requested session."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"0x7F 0x12"})}),(0,r.jsx)(n.td,{children:"Negative response: Subfunction not supported."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"0x7F 0x13"})}),(0,r.jsx)(n.td,{children:"Negative response: Incorrect message length or format."})]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"example-scenarios",children:"Example Scenarios"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Switching to Programming Session:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Send ",(0,r.jsx)(n.code,{children:"0x10 0x02"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Receive ",(0,r.jsx)(n.code,{children:"0x50 0x02"})," as confirmation."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Error Handling:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If the ECU responds with ",(0,r.jsx)(n.code,{children:"0x7F 0x12"}),", ensure the subfunction is supported in the current session."]}),"\n",(0,r.jsxs)(n.li,{children:["For ",(0,r.jsx)(n.code,{children:"0x7F 0x13"}),", verify the message format and length."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"logging",children:"Logging"}),"\n",(0,r.jsx)(n.p,{children:"CAPL provides the ability to log actions for traceability:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-capl",children:'writeToLog("session_log.txt", "Programming Session Request Sent");\nwriteToLog("session_log.txt", "ECU Response: 0x50 0x02 - Programming Session Enabled");\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"key-points",children:"Key Points"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Ensure the ECU supports the requested session."}),"\n",(0,r.jsx)(n.li,{children:"Always handle both positive and negative responses."}),"\n",(0,r.jsx)(n.li,{children:"Logging and debugging are crucial for verifying correct behavior during session transitions."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>a});var i=s(96540);const r={},o=i.createContext(r);function t(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);