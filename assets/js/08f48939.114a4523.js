"use strict";(self.webpackChunkvns=self.webpackChunkvns||[]).push([[91188],{22477:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"AUTOSAR/rte/direct","title":"Sender/Receiver Communication: Direct","description":"This documentation delves into Direct Sender/Receiver (S/R) Communication in AUTOSAR. The Direct communication paradigm provides a \\"last-is-best\\" semantic model for data transfer between software components. It focuses on efficient data handling through direct access without queuing, suitable for scenarios where the latest value is critical.","source":"@site/docs/AUTOSAR/03_rte/06_direct.md","sourceDirName":"AUTOSAR/03_rte","slug":"/AUTOSAR/rte/direct","permalink":"/Vehicle-Network-Standards/docs/AUTOSAR/rte/direct","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/AUTOSAR/03_rte/06_direct.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{},"sidebar":"autosarSidebar","previous":{"title":"Inter-ECU","permalink":"/Vehicle-Network-Standards/docs/AUTOSAR/rte/inter_ecu"},"next":{"title":"Sender/Receiver Communication: Buffered","permalink":"/Vehicle-Network-Standards/docs/AUTOSAR/rte/buffered"}}');var r=i(74848),t=i(28453);const a={},l="Sender/Receiver Communication: Direct",c={},o=[{value:"<strong>1. Key Features of Direct Communication</strong>",id:"1-key-features-of-direct-communication",level:2},{value:"<strong>1.1 Last-Is-Best Semantic</strong>",id:"11-last-is-best-semantic",level:3},{value:"<strong>1.2 Direct Access to Data Buffer</strong>",id:"12-direct-access-to-data-buffer",level:3},{value:"<strong>1.3 Initialization with Default Values</strong>",id:"13-initialization-with-default-values",level:3},{value:"<strong>2. Communication Process</strong>",id:"2-communication-process",level:2},{value:"<strong>2.1 Sender Operation</strong>",id:"21-sender-operation",level:3},{value:"<strong>2.2 Receiver Operation</strong>",id:"22-receiver-operation",level:3},{value:"<strong>3. Function Prototypes</strong>",id:"3-function-prototypes",level:2},{value:"<strong>3.1 Write Operation</strong>",id:"31-write-operation",level:3},{value:"Example:",id:"example",level:4},{value:"<strong>3.2 Read Operation</strong>",id:"32-read-operation",level:3},{value:"Example:",id:"example-1",level:4},{value:"<strong>4. Data Flow</strong>",id:"4-data-flow",level:2},{value:"<strong>5. Advantages of Direct Communication</strong>",id:"5-advantages-of-direct-communication",level:2},{value:"<strong>6. Limitations</strong>",id:"6-limitations",level:2},{value:"<strong>7. Use Cases</strong>",id:"7-use-cases",level:2},{value:"<strong>8. Summary</strong>",id:"8-summary",level:2},{value:"<strong>Key Takeaways:</strong>",id:"key-takeaways",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"senderreceiver-communication-direct",children:"Sender/Receiver Communication: Direct"})}),"\n",(0,r.jsxs)(n.p,{children:["This documentation delves into ",(0,r.jsx)(n.strong,{children:"Direct Sender/Receiver (S/R) Communication"}),' in AUTOSAR. The Direct communication paradigm provides a "last-is-best" semantic model for data transfer between software components. It focuses on efficient data handling through direct access without queuing, suitable for scenarios where the latest value is critical.']}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"1-key-features-of-direct-communication",children:(0,r.jsx)(n.strong,{children:"1. Key Features of Direct Communication"})}),"\n",(0,r.jsx)(n.h3,{id:"11-last-is-best-semantic",children:(0,r.jsx)(n.strong,{children:"1.1 Last-Is-Best Semantic"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Ensures that the ",(0,r.jsx)(n.strong,{children:"most recent data value"})," written by the sender is available to the receiver."]}),"\n",(0,r.jsxs)(n.li,{children:["Overwrites previous values, as there is no buffering or queuing mechanism (i.e., ",(0,r.jsx)(n.code,{children:"isQueued=false"}),")."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"12-direct-access-to-data-buffer",children:(0,r.jsx)(n.strong,{children:"1.2 Direct Access to Data Buffer"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The RTE uses ",(0,r.jsx)(n.strong,{children:"direct access"})," to a shared data buffer for communication between sender and receiver."]}),"\n",(0,r.jsxs)(n.li,{children:["This approach minimizes latency and is resource-efficient, especially for ",(0,r.jsxs)(n.strong,{children:["1",":n"," communication"]}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"13-initialization-with-default-values",children:(0,r.jsx)(n.strong,{children:"1.3 Initialization with Default Values"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The buffer is initialized with ",(0,r.jsx)(n.strong,{children:"default values"})," to prevent undefined behavior before the first write operation by the sender."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"2-communication-process",children:(0,r.jsx)(n.strong,{children:"2. Communication Process"})}),"\n",(0,r.jsx)(n.h3,{id:"21-sender-operation",children:(0,r.jsx)(n.strong,{children:"2.1 Sender Operation"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.strong,{children:"sender SWC"})," writes a data value to the RTE buffer."]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"Rte_Write"})," function updates the shared data buffer."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"22-receiver-operation",children:(0,r.jsx)(n.strong,{children:"2.2 Receiver Operation"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.strong,{children:"receiver SWC"})," reads the latest data value directly from the RTE buffer."]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"Rte_Read"})," function retrieves the data for use by the receiver's Runnable."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"3-function-prototypes",children:(0,r.jsx)(n.strong,{children:"3. Function Prototypes"})}),"\n",(0,r.jsx)(n.p,{children:"The RTE provides the following APIs for Direct Communication:"}),"\n",(0,r.jsx)(n.h3,{id:"31-write-operation",children:(0,r.jsx)(n.strong,{children:"3.1 Write Operation"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"Std_ReturnType Rte_Write_<p>_<d>(IN <DataType> data);\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"data"}),": Input data value to be written to the RTE buffer."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Returns:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"E_OK"})," if the write operation is successful."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"E_NOT_OK"})," if the operation fails."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example",children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"Rte_Write_LightControl_Brightness(75);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"32-read-operation",children:(0,r.jsx)(n.strong,{children:"3.2 Read Operation"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"Std_ReturnType Rte_Read_<p>_<d>(OUT <DataType>* data);\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"data"}),": Pointer to the variable where the retrieved value will be stored."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Returns:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"E_OK"})," if the read operation is successful."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"E_NOT_OK"})," if the operation fails."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-1",children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"uint8 brightness;\nRte_Read_LightControl_Brightness(&brightness);\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"4-data-flow",children:(0,r.jsx)(n.strong,{children:"4. Data Flow"})}),"\n",(0,r.jsx)(n.p,{children:"The diagram below demonstrates how Direct S/R communication is structured:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.strong,{children:"Runnable"})," in the sender SWC writes a value to the RTE buffer."]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.strong,{children:"Runnable"})," in the receiver SWC reads the value directly from the RTE buffer."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"5-advantages-of-direct-communication",children:(0,r.jsx)(n.strong,{children:"5. Advantages of Direct Communication"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Low Latency:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"No queuing mechanism ensures minimal communication delay."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Efficiency:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Direct access to the buffer minimizes overhead."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Simplicity:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Straightforward implementation makes it ideal for frequent updates where the latest data suffices."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"6-limitations",children:(0,r.jsx)(n.strong,{children:"6. Limitations"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"No Historical Data:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The absence of queuing means only the latest value is available; previous values are overwritten."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Initialization Dependency:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Relies on default values until the sender updates the buffer."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"7-use-cases",children:(0,r.jsx)(n.strong,{children:"7. Use Cases"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Real-Time Control Systems:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Suitable for systems where only the latest value matters, such as lighting control or motor speed adjustments."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["1",":n"," Communication:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Efficient in scenarios where a single sender provides updates to multiple receivers."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"8-summary",children:(0,r.jsx)(n.strong,{children:"8. Summary"})}),"\n",(0,r.jsxs)(n.p,{children:["Direct Sender/Receiver Communication in AUTOSAR provides a high-performance and low-overhead mechanism for exchanging the latest data between SWCs. By leveraging ",(0,r.jsx)(n.strong,{children:"last-is-best semantics"})," and ",(0,r.jsx)(n.strong,{children:"direct buffer access"}),", it ensures efficient data transfer for applications that prioritize real-time responsiveness."]}),"\n",(0,r.jsx)(n.h3,{id:"key-takeaways",children:(0,r.jsx)(n.strong,{children:"Key Takeaways:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Direct communication uses the ",(0,r.jsx)(n.code,{children:"Rte_Write"})," and ",(0,r.jsx)(n.code,{children:"Rte_Read"})," functions to handle data exchange."]}),"\n",(0,r.jsx)(n.li,{children:"Ensures low-latency communication with minimal resource usage."}),"\n",(0,r.jsx)(n.li,{children:"Suitable for real-time, high-frequency update scenarios."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"For further elaboration or examples, feel free to reach out!"})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var s=i(96540);const r={},t=s.createContext(r);function a(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);