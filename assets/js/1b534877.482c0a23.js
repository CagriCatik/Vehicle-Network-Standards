"use strict";(self.webpackChunkvns=self.webpackChunkvns||[]).push([[9092],{73881:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"UDS/examples/Read-Data-by-Identifier","title":"Examples - 0x22","description":"---","source":"@site/docs/UDS/04_examples/05_Read-Data-by-Identifier.md","sourceDirName":"UDS/04_examples","slug":"/UDS/examples/Read-Data-by-Identifier","permalink":"/Vehicle-Network-Standards/docs/UDS/examples/Read-Data-by-Identifier","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/UDS/04_examples/05_Read-Data-by-Identifier.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"udsSidebar","previous":{"title":"Examples - 0x27","permalink":"/Vehicle-Network-Standards/docs/UDS/examples/Security-Access"},"next":{"title":"Examples - 0x2E","permalink":"/Vehicle-Network-Standards/docs/UDS/examples/Write-Data-by-Identifier"}}');var r=s(74848),i=s(28453);const o={sidebar_position:5},d="Examples - 0x22",a={},l=[{value:"<strong>Python Example: Using <code>python-uds</code> Library</strong>",id:"python-example-using-python-uds-library",level:2},{value:"Install the <code>python-uds</code> Library",id:"install-the-python-uds-library",level:3},{value:"Python Code to Read Data by Identifier",id:"python-code-to-read-data-by-identifier",level:3},{value:"Key Points:",id:"key-points",level:2},{value:"<strong>CAPL Example: Simulating RDBI Request</strong>",id:"capl-example-simulating-rdbi-request",level:2},{value:"CAPL Code to Read Data by Identifier (0x22)",id:"capl-code-to-read-data-by-identifier-0x22",level:3},{value:"Key Points:",id:"key-points-1",level:2},{value:"3. <strong>Simulating UDS RDBI Request Using CANoe</strong> (Vector CANoe Simulation)",id:"3-simulating-uds-rdbi-request-using-canoe-vector-canoe-simulation",level:2},{value:"3.1. Setting Up the CANoe Simulation",id:"31-setting-up-the-canoe-simulation",level:3},{value:"3.2. Example CANoe Simulation Setup",id:"32-example-canoe-simulation-setup",level:3},{value:"4. <strong>Example: Testing Vehicle Speed (0x02)</strong>",id:"4-example-testing-vehicle-speed-0x02",level:2},{value:"4.1. Python Example: Request Vehicle Speed (Identifier <code>0x02</code>)",id:"41-python-example-request-vehicle-speed-identifier-0x02",level:3},{value:"4.2. CAPL Example: Request Vehicle Speed (Identifier <code>0x02</code>)",id:"42-capl-example-request-vehicle-speed-identifier-0x02",level:2},{value:"5. <strong>Conclusion</strong>",id:"5-conclusion",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"examples---0x22",children:"Examples - 0x22"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"python-example-using-python-uds-library",children:(0,r.jsxs)(n.strong,{children:["Python Example: Using ",(0,r.jsx)(n.code,{children:"python-uds"})," Library"]})}),"\n",(0,r.jsxs)(n.p,{children:["We will use the ",(0,r.jsx)(n.code,{children:"python-uds"})," library, an open-source Python package that allows you to send and receive UDS messages. The example demonstrates how to send a ",(0,r.jsx)(n.strong,{children:"Read Data By Identifier"})," request to an ECU and interpret the response."]}),"\n",(0,r.jsxs)(n.h3,{id:"install-the-python-uds-library",children:["Install the ",(0,r.jsx)(n.code,{children:"python-uds"})," Library"]}),"\n",(0,r.jsxs)(n.p,{children:["First, install the ",(0,r.jsx)(n.code,{children:"python-uds"})," library:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pip install python-uds\n"})}),"\n",(0,r.jsx)(n.h3,{id:"python-code-to-read-data-by-identifier",children:"Python Code to Read Data by Identifier"}),"\n",(0,r.jsxs)(n.p,{children:["In this example, we\u2019ll use the ",(0,r.jsx)(n.code,{children:"python-uds"})," library to send a ",(0,r.jsx)(n.strong,{children:"Read Data By Identifier (0x22)"})," request for the ECU software version (identifier ",(0,r.jsx)(n.code,{children:"0x01"}),") and retrieve the response."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import uds\nfrom uds.enums import Services\nfrom uds.services import ReadDataByIdentifier\nfrom uds.datatypes import Address\nimport time\n\n# Define the ECU address (example CAN address)\necu_address = Address("0x7E0")  # Common address for ECU on CAN bus\n\n# Create a UDS transport object (CAN transport in this case)\n# The `uds` library supports CAN and other transports; configure accordingly\ntransport = uds.transport.can.CANTransport(channel="can0", address=ecu_address)\n\n# Define the identifier for Software Version (example: 0x01)\ndata_identifier = [0x01]\n\n# Create a ReadDataByIdentifier service request\nservice_request = ReadDataByIdentifier(data_identifier)\n\n# Send the request and receive the response\nresponse = transport.request(service_request)\n\n# Print the response data (Software version, for example)\nprint("Received Response:")\nprint(response)\n\n# Example of interpreting the response\n# Assuming the response is: 0x62 0x01 0x01 0x00 0x02 0x03 (Software version: 1.0.2.3)\nif response.service_id == 0x62:\n    version_data = response.data[2:]  # Skip the identifier byte\n    software_version = ".".join([str(byte) for byte in version_data])\n    print(f"Software Version: {software_version}")\nelse:\n    print("Error: Invalid response")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"key-points",children:"Key Points:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"CAN Address"}),": ",(0,r.jsx)(n.code,{children:"0x7E0"})," is typically the address for the ECU in a CAN network."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Transport Layer"}),": In this case, we're using ",(0,r.jsx)(n.strong,{children:"CAN"})," as the transport layer."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Request"}),": We're sending a ",(0,r.jsx)(n.strong,{children:"Read Data By Identifier"})," request to retrieve the ECU's software version using identifier ",(0,r.jsx)(n.code,{children:"0x01"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Response"}),": The response is parsed to extract and display the software version (for example: ",(0,r.jsx)(n.code,{children:"1.0.2.3"}),")."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"capl-example-simulating-rdbi-request",children:(0,r.jsx)(n.strong,{children:"CAPL Example: Simulating RDBI Request"})}),"\n",(0,r.jsxs)(n.p,{children:["In ",(0,r.jsx)(n.strong,{children:"CAPL"})," (CAN Application Protocol Language), which is used in ",(0,r.jsx)(n.strong,{children:"Vector CANoe"})," and ",(0,r.jsx)(n.strong,{children:"CANalyzer"}),", you can implement UDS services directly for CAN simulation and testing."]}),"\n",(0,r.jsx)(n.h3,{id:"capl-code-to-read-data-by-identifier-0x22",children:"CAPL Code to Read Data by Identifier (0x22)"}),"\n",(0,r.jsxs)(n.p,{children:["This example demonstrates how to implement a ",(0,r.jsx)(n.strong,{children:"Read Data By Identifier"})," request for the software version (identifier ",(0,r.jsx)(n.code,{children:"0x01"}),")."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CAPL",children:'variables\n{\n  msTimer timeoutTimer;  // Timer for response timeout\n}\n\non start\n{\n  // Send a Read Data By Identifier (0x22) request for the Software Version (identifier 0x01)\n  output("Sending RDBI request for Software Version (0x01)...");\n\n  // Send UDS request on the CAN bus\n  byte request[8] = {0x22, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};  // 0x22 = RDBI, 0x01 = identifier for software version\n  output("Request: %x %x", request[0], request[1]);\n  output(request);\n\n  // Send message via CAN interface (assume CAN channel is configured)\n  outputMessage(0x7E0, request, 8);  // Assuming 0x7E0 is the ECU address\n\n  // Start timer for response timeout\n  setTimer(timeoutTimer, 1000);  // 1-second timeout\n}\n\non message 0x7E8  // Assuming ECU responds on CAN address 0x7E8\n{\n  byte response[8];\n  response = thisByte;\n\n  // Check the response service ID (should be 0x62 for successful response)\n  if (response[0] == 0x62) {\n    output("Received valid response for RDBI!");\n    output("Software Version: %x.%x.%x.%x", response[2], response[3], response[4], response[5]);\n  } else {\n    output("Error: Invalid response received.");\n  }\n}\n\non timer timeoutTimer\n{\n  output("Error: Response timeout!");\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"key-points-1",children:"Key Points:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Service ID"}),": We send ",(0,r.jsx)(n.code,{children:"0x22"})," for the ",(0,r.jsx)(n.strong,{children:"Read Data By Identifier"})," service and ",(0,r.jsx)(n.code,{children:"0x01"})," for the software version identifier."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"CAN Message"}),": The message is sent to address ",(0,r.jsx)(n.code,{children:"0x7E0"})," (ECU address) and waits for the response from ",(0,r.jsx)(n.code,{children:"0x7E8"})," (ECU response address)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Response Handling"}),": When the ECU responds with a message starting with ",(0,r.jsx)(n.code,{children:"0x62"}),", we interpret the response to extract and print the software version (e.g., ",(0,r.jsx)(n.code,{children:"1.0.2.3"}),")."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"3-simulating-uds-rdbi-request-using-canoe-vector-canoe-simulation",children:["3. ",(0,r.jsx)(n.strong,{children:"Simulating UDS RDBI Request Using CANoe"})," (Vector CANoe Simulation)"]}),"\n",(0,r.jsxs)(n.p,{children:["If you use ",(0,r.jsx)(n.strong,{children:"Vector CANoe"})," for UDS simulation, you can implement the ",(0,r.jsx)(n.strong,{children:"Read Data By Identifier"})," service in a similar way to the CAPL example. In CANoe, you will use the ",(0,r.jsx)(n.strong,{children:"CAPL script"})," to send the request and receive the response. The configuration will include setting up the ECU simulation to respond with specific identifiers for testing."]}),"\n",(0,r.jsx)(n.h3,{id:"31-setting-up-the-canoe-simulation",children:"3.1. Setting Up the CANoe Simulation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ECU Simulator"}),": Set up an ECU in CANoe to respond to UDS requests, including the ",(0,r.jsx)(n.code,{children:"0x22"})," service."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Database"}),": Use ",(0,r.jsx)(n.strong,{children:"DBC"})," files to define the CAN messages and signal mappings."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"32-example-canoe-simulation-setup",children:"3.2. Example CANoe Simulation Setup"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Message Configuration"}),": Define the CAN message for the ",(0,r.jsx)(n.code,{children:"0x22"})," request and its response."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"CAPL Script"}),": Implement CAPL script to send the request and handle the response, as shown in the previous CAPL example."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["This example will ensure that the UDS ",(0,r.jsx)(n.strong,{children:"Read Data By Identifier"})," service is successfully simulated and tested using Vector CANoe."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"4-example-testing-vehicle-speed-0x02",children:["4. ",(0,r.jsx)(n.strong,{children:"Example: Testing Vehicle Speed (0x02)"})]}),"\n",(0,r.jsxs)(n.h3,{id:"41-python-example-request-vehicle-speed-identifier-0x02",children:["4.1. Python Example: Request Vehicle Speed (Identifier ",(0,r.jsx)(n.code,{children:"0x02"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["Let\u2019s send a request to retrieve the ",(0,r.jsx)(n.strong,{children:"vehicle speed"})," using identifier ",(0,r.jsx)(n.code,{children:"0x02"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import uds\nfrom uds.enums import Services\nfrom uds.services import ReadDataByIdentifier\nfrom uds.datatypes import Address\n\n# Define ECU address\necu_address = Address("0x7E0")  # CAN address of the ECU\n\n# Define transport layer (CAN transport in this example)\ntransport = uds.transport.can.CANTransport(channel="can0", address=ecu_address)\n\n# Define vehicle speed identifier (0x02)\ndata_identifier = [0x02]\n\n# Create a ReadDataByIdentifier request for vehicle speed\nservice_request = ReadDataByIdentifier(data_identifier)\n\n# Send the request and get the response\nresponse = transport.request(service_request)\n\n# Process and print response\nprint("Received Response:")\nprint(response)\n\n# Example: Interpret vehicle speed response\nif response.service_id == 0x62:\n    vehicle_speed = int.from_bytes(response.data[2:], byteorder="big")  # Get speed (bytes 2 and 3)\n    print(f"Vehicle Speed: {vehicle_speed} km/h")\nelse:\n    print("Error: Invalid response")\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"42-capl-example-request-vehicle-speed-identifier-0x02",children:["4.2. CAPL Example: Request Vehicle Speed (Identifier ",(0,r.jsx)(n.code,{children:"0x02"}),")"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-CAPL",children:'on start\n{\n  byte request[8] = {0x22, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};  // 0x22 = RDBI, 0x02 = Vehicle Speed\n  output("Sending RDBI request for Vehicle Speed (0x02)...");\n\n  // Send UDS message on CAN bus\n  outputMessage(0x7E0, request, 8);  // CAN address of ECU: 0x7E0\n\n  // Set timeout timer\n  setTimer(timeoutTimer, 1000);  // 1 second timeout\n}\n\non message 0x7E8  // Assuming the ECU responds on address 0x7E8\n{\n  byte response[8];\n  response = thisByte;\n\n  // Handle the response\n  if (response[0] == 0x62) {\n    output("Received valid response for RDBI.");\n    output("Vehicle Speed: %x", response[2] * 256 + response[\n\n3]);  // Speed value in km/h\n  } else {\n    output("Error: Invalid response");\n  }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"5-conclusion",children:["5. ",(0,r.jsx)(n.strong,{children:"Conclusion"})]}),"\n",(0,r.jsxs)(n.p,{children:["These examples show how to implement and simulate the ",(0,r.jsx)(n.strong,{children:"Read Data By Identifier (0x22)"})," service using Python and CAPL. By using tools like ",(0,r.jsx)(n.code,{children:"python-uds"}),", ",(0,r.jsx)(n.strong,{children:"Vector CANoe"}),", and ",(0,r.jsx)(n.strong,{children:"CAPL scripts"}),", you can simulate diagnostic interactions with ECUs, retrieve vehicle data (e.g., software version, vehicle speed), and integrate the service into vehicle testing and diagnostics workflows."]}),"\n",(0,r.jsx)(n.p,{children:"By following these examples, you should be able to implement UDS requests for various data identifiers in both real-world and simulated environments, and handle responses in an automated and robust manner."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>d});var t=s(96540);const r={},i=t.createContext(r);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);