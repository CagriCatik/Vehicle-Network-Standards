"use strict";(self.webpackChunkvns=self.webpackChunkvns||[]).push([[69206],{31273:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>d,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"UDS/examples/Read-Memory-by-Adress","title":"Examples - 0x23","description":"Certainly! Below are the implementations of practical examples for Read Memory by Address (0x23), including both the request and response formats. These examples demonstrate the usage of the service in real-world scenarios, where you would send a request to an ECU and receive a response.","source":"@site/docs/UDS/04_examples/07_Read-Memory-by-Adress.md","sourceDirName":"UDS/04_examples","slug":"/UDS/examples/Read-Memory-by-Adress","permalink":"/Vehicle-Network-Standards/docs/UDS/examples/Read-Memory-by-Adress","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/UDS/04_examples/07_Read-Memory-by-Adress.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"udsSidebar","previous":{"title":"Examples - 0x2E","permalink":"/Vehicle-Network-Standards/docs/UDS/examples/Write-Data-by-Identifier"},"next":{"title":"Examples - 0x14","permalink":"/Vehicle-Network-Standards/docs/UDS/examples/Clear-DTC-Information"}}');var t=n(74848),i=n(28453);const d={sidebar_position:7},o="Examples - 0x23",a={},c=[{value:"<strong>Example 1: Reading ECU Firmware Version</strong>",id:"example-1-reading-ecu-firmware-version",level:2},{value:"<strong>Request:</strong>",id:"request",level:3},{value:"<strong>Request Message Output:</strong>",id:"request-message-output",level:3},{value:"<strong>Response:</strong>",id:"response",level:3},{value:"<strong>Response Message Output:</strong>",id:"response-message-output",level:3},{value:"<strong>Example 2: Invalid Memory Address</strong>",id:"example-2-invalid-memory-address",level:2},{value:"<strong>Request:</strong>",id:"request-1",level:3},{value:"<strong>Request Message Output:</strong>",id:"request-message-output-1",level:3},{value:"<strong>Response:</strong>",id:"response-1",level:3},{value:"<strong>Response Message Output:</strong>",id:"response-message-output-1",level:3},{value:"<strong>Example 3: Reading Memory with Security Access Denied</strong>",id:"example-3-reading-memory-with-security-access-denied",level:2},{value:"<strong>Request:</strong>",id:"request-2",level:3},{value:"<strong>Request Message Output:</strong>",id:"request-message-output-2",level:3},{value:"<strong>Response:</strong>",id:"response-2",level:3},{value:"<strong>Response Message Output:</strong>",id:"response-message-output-2",level:3},{value:"Conclusion",id:"conclusion",level:2}];function l(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"examples---0x23",children:"Examples - 0x23"})}),"\n",(0,t.jsxs)(s.p,{children:["Certainly! Below are the implementations of practical examples for ",(0,t.jsx)(s.strong,{children:"Read Memory by Address (0x23)"}),", including both the request and response formats. These examples demonstrate the usage of the service in real-world scenarios, where you would send a request to an ECU and receive a response."]}),"\n",(0,t.jsx)(s.h2,{id:"example-1-reading-ecu-firmware-version",children:(0,t.jsx)(s.strong,{children:"Example 1: Reading ECU Firmware Version"})}),"\n",(0,t.jsxs)(s.p,{children:["In this example, we will read a 4-byte firmware version stored at memory address ",(0,t.jsx)(s.code,{children:"0x2000"}),". The requested memory length is 4 bytes, and we will simulate both a request and a response."]}),"\n",(0,t.jsx)(s.h3,{id:"request",children:(0,t.jsx)(s.strong,{children:"Request:"})}),"\n",(0,t.jsxs)(s.p,{children:["The request asks the ECU to read 4 bytes starting from memory address ",(0,t.jsx)(s.code,{children:"0x2000"}),". The service identifier ",(0,t.jsx)(s.code,{children:"0x23"})," is used to invoke the ",(0,t.jsx)(s.strong,{children:"Read Memory by Address"})," service."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:'# Request to Read Memory by Address from address 0x2000 for 4 bytes\n\n# Service Identifier: 0x23 (Read Memory by Address)\nservice_id = 0x23\n\n# Memory Address to Read: 0x2000 (4 bytes)\nmemory_address = [0x00, 0x00, 0x20, 0x00]\n\n# Length of Data to Read: 4 bytes\nlength_to_read = [0x00, 0x04]\n\n# Combine everything into the Request Message\nrequest_message = [service_id] + memory_address + length_to_read\n\n# Print the Request Message\nprint(f"Request Message: {request_message}")\n'})}),"\n",(0,t.jsx)(s.h3,{id:"request-message-output",children:(0,t.jsx)(s.strong,{children:"Request Message Output:"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-plaintext",children:"Request Message: [35, 0, 0, 32, 0, 0, 4]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Here, the request consists of:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Service Identifier (0x23)"}),': Indicates that the "Read Memory by Address" service is requested.']}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Memory Address (0x2000)"}),": Specifies the starting address to read from."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Length to Read (4 bytes)"}),": Specifies that we want to read 4 bytes of data from the starting address."]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"response",children:(0,t.jsx)(s.strong,{children:"Response:"})}),"\n",(0,t.jsxs)(s.p,{children:["After sending the request, the ECU responds with the requested memory data. In this example, let\u2019s assume the firmware version stored at address ",(0,t.jsx)(s.code,{children:"0x2000"})," is ",(0,t.jsx)(s.code,{children:"0x01, 0x02, 0x03, 0x04"})," (a simple 4-byte version number)."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:'# Response from ECU after reading 4 bytes of memory\nresponse_service_id = 0x23  # Response Service Identifier\nmemory_data = [0x01, 0x02, 0x03, 0x04]  # Data read from the memory\nresponse_code = 0x00  # Positive Response Code (Success)\n\n# Combine everything into the Response Message\nresponse_message = [response_service_id] + memory_data + [response_code]\n\n# Print the Response Message\nprint(f"Response Message: {response_message}")\n'})}),"\n",(0,t.jsx)(s.h3,{id:"response-message-output",children:(0,t.jsx)(s.strong,{children:"Response Message Output:"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-plaintext",children:"Response Message: [35, 1, 2, 3, 4, 0]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Here:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Service Identifier (0x23)"}),': Indicates that the response corresponds to the "Read Memory by Address" service.']}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Memory Data (0x01, 0x02, 0x03, 0x04)"}),": This is the 4-byte firmware version read from memory at address ",(0,t.jsx)(s.code,{children:"0x2000"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Response Code (0x00)"}),": Indicates a successful operation."]}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"example-2-invalid-memory-address",children:(0,t.jsx)(s.strong,{children:"Example 2: Invalid Memory Address"})}),"\n",(0,t.jsxs)(s.p,{children:["This example demonstrates what happens when an invalid memory address is requested. Let's say the ECU does not recognize the address ",(0,t.jsx)(s.code,{children:"0xABCDE"})," (because it's out of range or invalid). The ECU will respond with a ",(0,t.jsx)(s.strong,{children:"Negative Response Code"})," (",(0,t.jsx)(s.code,{children:"0x31"})," - Request Out of Range)."]}),"\n",(0,t.jsx)(s.h3,{id:"request-1",children:(0,t.jsx)(s.strong,{children:"Request:"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:'# Request to Read Memory by Address from address 0xABCDE for 4 bytes\n\n# Service Identifier: 0x23 (Read Memory by Address)\nservice_id = 0x23\n\n# Invalid Memory Address: 0xABCDE (out of range)\nmemory_address = [0x0A, 0xBC, 0xDE, 0x00]\n\n# Length of Data to Read: 4 bytes\nlength_to_read = [0x00, 0x04]\n\n# Combine everything into the Request Message\nrequest_message = [service_id] + memory_address + length_to_read\n\n# Print the Request Message\nprint(f"Request Message: {request_message}")\n'})}),"\n",(0,t.jsx)(s.h3,{id:"request-message-output-1",children:(0,t.jsx)(s.strong,{children:"Request Message Output:"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-plaintext",children:"Request Message: [35, 10, 188, 222, 0, 0, 4]\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Here, the request is attempting to read from the invalid address ",(0,t.jsx)(s.code,{children:"0xABCDE"}),", and it specifies that 4 bytes should be read."]}),"\n",(0,t.jsx)(s.h3,{id:"response-1",children:(0,t.jsx)(s.strong,{children:"Response:"})}),"\n",(0,t.jsxs)(s.p,{children:["Since the address is out of range, the ECU will return a ",(0,t.jsx)(s.strong,{children:"Negative Response Code"})," (",(0,t.jsx)(s.code,{children:"0x31"}),"), indicating that the request cannot be processed due to the invalid address."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:'# Response from ECU when memory address is out of range\nresponse_service_id = 0x23  # Response Service Identifier\nnegative_response_code = 0x31  # Negative Response Code: Request Out of Range\n\n# Combine everything into the Response Message\nresponse_message = [response_service_id] + [negative_response_code]\n\n# Print the Response Message\nprint(f"Response Message: {response_message}")\n'})}),"\n",(0,t.jsx)(s.h3,{id:"response-message-output-1",children:(0,t.jsx)(s.strong,{children:"Response Message Output:"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-plaintext",children:"Response Message: [35, 49]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Here:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Service Identifier (0x23)"}),": Indicates the service being invoked is ",(0,t.jsx)(s.strong,{children:"Read Memory by Address"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Response Code (0x31)"}),": Indicates the request was out of range, meaning the memory address specified (",(0,t.jsx)(s.code,{children:"0xABCDE"}),") is invalid."]}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"example-3-reading-memory-with-security-access-denied",children:(0,t.jsx)(s.strong,{children:"Example 3: Reading Memory with Security Access Denied"})}),"\n",(0,t.jsxs)(s.p,{children:["In this example, the ECU requires security access to read the memory, and the diagnostic tool has not provided the correct credentials or access level. This results in a ",(0,t.jsx)(s.strong,{children:"Security Access Denied"})," response (",(0,t.jsx)(s.code,{children:"0x33"}),")."]}),"\n",(0,t.jsx)(s.h3,{id:"request-2",children:(0,t.jsx)(s.strong,{children:"Request:"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:'# Request to Read Memory by Address from address 0x3000 for 4 bytes (requires security access)\n\n# Service Identifier: 0x23 (Read Memory by Address)\nservice_id = 0x23\n\n# Memory Address: 0x3000 (4 bytes)\nmemory_address = [0x00, 0x00, 0x30, 0x00]\n\n# Length of Data to Read: 4 bytes\nlength_to_read = [0x00, 0x04]\n\n# Combine everything into the Request Message\nrequest_message = [service_id] + memory_address + length_to_read\n\n# Print the Request Message\nprint(f"Request Message: {request_message}")\n'})}),"\n",(0,t.jsx)(s.h3,{id:"request-message-output-2",children:(0,t.jsx)(s.strong,{children:"Request Message Output:"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-plaintext",children:"Request Message: [35, 0, 0, 48, 0, 0, 4]\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Here, the diagnostic tool is attempting to read 4 bytes starting from memory address ",(0,t.jsx)(s.code,{children:"0x3000"}),". However, security access is required to perform this operation."]}),"\n",(0,t.jsx)(s.h3,{id:"response-2",children:(0,t.jsx)(s.strong,{children:"Response:"})}),"\n",(0,t.jsxs)(s.p,{children:["Since security access is not granted or provided, the ECU returns a ",(0,t.jsx)(s.strong,{children:"Negative Response Code"})," (",(0,t.jsx)(s.code,{children:"0x33"})," - Security Access Denied)."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:'# Response from ECU when security access is denied\nresponse_service_id = 0x23  # Response Service Identifier\nnegative_response_code = 0x33  # Negative Response Code: Security Access Denied\n\n# Combine everything into the Response Message\nresponse_message = [response_service_id] + [negative_response_code]\n\n# Print the Response Message\nprint(f"Response Message: {response_message}")\n'})}),"\n",(0,t.jsx)(s.h3,{id:"response-message-output-2",children:(0,t.jsx)(s.strong,{children:"Response Message Output:"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-plaintext",children:"Response Message: [35, 51]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Here:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Service Identifier (0x23)"}),": Indicates that the service being invoked is ",(0,t.jsx)(s.strong,{children:"Read Memory by Address"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Response Code (0x33)"}),": Indicates that the ECU requires security access, and the access level provided by the diagnostic tool is insufficient."]}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"Read Memory by Address"})," service (0x23) is a powerful tool for accessing specific memory areas of an ECU. The examples provided here demonstrate typical usage scenarios, including reading memory, handling invalid addresses, and dealing with security access requirements."]})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>d,x:()=>o});var r=n(96540);const t={},i=r.createContext(t);function d(e){const s=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),r.createElement(i.Provider,{value:s},e.children)}}}]);