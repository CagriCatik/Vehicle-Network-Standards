"use strict";(self.webpackChunkvns=self.webpackChunkvns||[]).push([[26767],{31159:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"AUTOSAR/rte/rte_com_interface","title":"Communication Interface","description":"The Runtime Environment (RTE) acts as the central communication interface in AUTOSAR, enabling seamless data exchange between Software Components (SWCs) and between SWCs and the Basic Software (BSW). It facilitates various communication mechanisms, abstracts the complexity of the Virtual Functional Bus (VFB), and ensures data consistency across the system.","source":"@site/docs/AUTOSAR/03_rte/04_rte_com_interface.md","sourceDirName":"AUTOSAR/03_rte","slug":"/AUTOSAR/rte/rte_com_interface","permalink":"/Vehicle-Network-Standards/docs/AUTOSAR/rte/rte_com_interface","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/AUTOSAR/03_rte/04_rte_com_interface.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{},"sidebar":"autosarSidebar","previous":{"title":"Runnables","permalink":"/Vehicle-Network-Standards/docs/AUTOSAR/rte/rte_runnables"},"next":{"title":"Inter-ECU","permalink":"/Vehicle-Network-Standards/docs/AUTOSAR/rte/inter_ecu"}}');var i=t(74848),r=t(28453);const a={},o="Communication Interface",l={},c=[{value:"<strong>1. Role of the RTE as a Communication Interface</strong>",id:"1-role-of-the-rte-as-a-communication-interface",level:2},{value:"<strong>Key Responsibilities:</strong>",id:"key-responsibilities",level:3},{value:"<strong>2. Communication Mechanisms</strong>",id:"2-communication-mechanisms",level:2},{value:"<strong>2.1 Sender-Receiver (S/R) Communication</strong>",id:"21-sender-receiver-sr-communication",level:3},{value:"Example:",id:"example",level:4},{value:"<strong>2.2 Client-Server (C/S) Communication</strong>",id:"22-client-server-cs-communication",level:3},{value:"Example:",id:"example-1",level:4},{value:"<strong>2.3 Intra-ECU and Inter-ECU Communication</strong>",id:"23-intra-ecu-and-inter-ecu-communication",level:3},{value:"Example:",id:"example-2",level:4},{value:"<strong>2.4 Callbacks of AR-COM</strong>",id:"24-callbacks-of-ar-com",level:3},{value:"Example:",id:"example-3",level:4},{value:"<strong>3. Additional Features of the RTE</strong>",id:"3-additional-features-of-the-rte",level:2},{value:"<strong>3.1 Data Consistency</strong>",id:"31-data-consistency",level:3},{value:"<strong>3.2 Support for Primitive and Complex Data</strong>",id:"32-support-for-primitive-and-complex-data",level:3},{value:"Example of a Complex Data Structure:",id:"example-of-a-complex-data-structure",level:4},{value:"<strong>3.3 Multiple Instantiations of SWC Types</strong>",id:"33-multiple-instantiations-of-swc-types",level:3},{value:"<strong>4. Summary</strong>",id:"4-summary",level:2},{value:"<strong>Key Takeaways</strong>:",id:"key-takeaways",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"communication-interface",children:"Communication Interface"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"Runtime Environment (RTE)"})," acts as the central communication interface in AUTOSAR, enabling seamless data exchange between ",(0,i.jsx)(n.strong,{children:"Software Components (SWCs)"})," and between SWCs and the ",(0,i.jsx)(n.strong,{children:"Basic Software (BSW)"}),". It facilitates various communication mechanisms, abstracts the complexity of the Virtual Functional Bus (VFB), and ensures data consistency across the system."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"1-role-of-the-rte-as-a-communication-interface",children:(0,i.jsx)(n.strong,{children:"1. Role of the RTE as a Communication Interface"})}),"\n",(0,i.jsx)(n.h3,{id:"key-responsibilities",children:(0,i.jsx)(n.strong,{children:"Key Responsibilities:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Implementation of the Virtual Functional Bus (VFB):"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The VFB abstracts communication details, ensuring SWCs remain hardware-independent."}),"\n",(0,i.jsx)(n.li,{children:"The RTE realizes VFB functionalities within an ECU."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Support for Multiple Communication Paradigms:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Sender-Receiver (S/R):"})," Data is exchanged between a sender and one or more receivers."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Client-Server (C/S):"})," Operations are invoked by a client and executed by a server."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Intra-ECU and Inter-ECU Communication:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Intra-ECU:"})," Communication between SWCs within the same ECU."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Inter-ECU:"})," Communication across ECUs via communication protocols (e.g., CAN, LIN, Ethernet)."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"2-communication-mechanisms",children:(0,i.jsx)(n.strong,{children:"2. Communication Mechanisms"})}),"\n",(0,i.jsx)(n.h3,{id:"21-sender-receiver-sr-communication",children:(0,i.jsx)(n.strong,{children:"2.1 Sender-Receiver (S/R) Communication"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Used for asynchronous data exchange."}),"\n",(0,i.jsx)(n.li,{children:"A sender SWC writes data to an RTE port, and the data is received by one or more receiver SWCs."}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example",children:"Example:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Door Contact SWC"})," sends a signal (",(0,i.jsx)(n.code,{children:"DoorOpen"}),") to the ",(0,i.jsx)(n.strong,{children:"Interior Light SWC"})," to activate the light."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"// Sender SWC writes the signal\nRte_Write_DoorContact_DoorOpen(doorState);\n\n// Receiver SWC reads the signal\nboolean doorState;\nRte_Read_InteriorLight_DoorOpen(&doorState);\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"22-client-server-cs-communication",children:(0,i.jsx)(n.strong,{children:"2.2 Client-Server (C/S) Communication"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Used for synchronous or asynchronous operation calls."}),"\n",(0,i.jsx)(n.li,{children:"A client SWC requests an operation from a server SWC, which performs the requested action and returns the result."}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example-1",children:"Example:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Diagnostic Client SWC"})," requests diagnostic data from a server."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"// Client SWC invokes an operation\nRte_Call_DiagnosticService_ReadData(&diagnosticData);\n\n// Server SWC processes the request\nvoid DiagnosticService_ReadData(diagnosticDataType* data) {\n    // Retrieve diagnostic information\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"23-intra-ecu-and-inter-ecu-communication",children:(0,i.jsx)(n.strong,{children:"2.3 Intra-ECU and Inter-ECU Communication"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Intra-ECU Communication"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Data is exchanged locally between SWCs through the RTE within the same ECU."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Inter-ECU Communication"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Data is routed via the ",(0,i.jsx)(n.strong,{children:"AUTOSAR COM"})," stack (AR-COM), which supports various protocols like CAN, LIN, and Ethernet."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example-2",children:"Example:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Inter-ECU Data Exchange"}),":","\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"SWC1 on ECU1 sends data to the RTE."}),"\n",(0,i.jsx)(n.li,{children:"The RTE routes the data via AR-COM to SWC2 on ECU2."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"24-callbacks-of-ar-com",children:(0,i.jsx)(n.strong,{children:"2.4 Callbacks of AR-COM"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The RTE integrates with AR-COM to enable efficient communication."}),"\n",(0,i.jsx)(n.li,{children:"Callbacks are used to handle specific communication events, such as data reception or errors."}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example-3",children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"void AR_Com_Callback_DataReceived() {\n    // Handle the reception of data\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"3-additional-features-of-the-rte",children:(0,i.jsx)(n.strong,{children:"3. Additional Features of the RTE"})}),"\n",(0,i.jsx)(n.h3,{id:"31-data-consistency",children:(0,i.jsx)(n.strong,{children:"3.1 Data Consistency"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Ensures consistent data across SWCs."}),"\n",(0,i.jsxs)(n.li,{children:["Mechanisms are implemented to handle:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Inter-SWC Consistency:"})," Synchronization between communicating SWCs."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Intra-SWC Consistency:"})," Ensures data integrity within a single SWC."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"32-support-for-primitive-and-complex-data",children:(0,i.jsx)(n.strong,{children:"3.2 Support for Primitive and Complex Data"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Primitive Data Types:"})," Integer, Boolean, Float."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Complex Data Types:"})," Arrays, Structures, and Records."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example-of-a-complex-data-structure",children:"Example of a Complex Data Structure:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"typedef struct {\n    uint16_t temperature;\n    uint16_t pressure;\n} SensorDataType;\n\n// Writing complex data\nSensorDataType sensorData = {75, 1013};\nRte_Write_SensorData(sensorData);\n\n// Reading complex data\nSensorDataType receivedData;\nRte_Read_SensorData(&receivedData);\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"33-multiple-instantiations-of-swc-types",children:(0,i.jsx)(n.strong,{children:"3.3 Multiple Instantiations of SWC Types"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The RTE supports multiple instances of the same SWC type, enabling scalable system designs."}),"\n",(0,i.jsx)(n.li,{children:"Example: Multiple instances of a sensor SWC for different sensors (e.g., front and rear)."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"4-summary",children:(0,i.jsx)(n.strong,{children:"4. Summary"})}),"\n",(0,i.jsx)(n.p,{children:"The RTE in AUTOSAR is a robust communication interface that abstracts the complexity of inter- and intra-ECU communication. By supporting multiple paradigms (S/R and C/S), implementing data consistency mechanisms, and enabling seamless communication through AR-COM, the RTE ensures modularity, scalability, and reliability in automotive systems."}),"\n",(0,i.jsxs)(n.h3,{id:"key-takeaways",children:[(0,i.jsx)(n.strong,{children:"Key Takeaways"}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"The RTE implements the Virtual Functional Bus (VFB) for SWC communication."}),"\n",(0,i.jsx)(n.li,{children:"Supports Sender-Receiver (S/R) and Client-Server (C/S) communication paradigms."}),"\n",(0,i.jsx)(n.li,{children:"Ensures data consistency and supports both primitive and complex data types."}),"\n",(0,i.jsx)(n.li,{children:"Provides mechanisms for both intra-ECU and inter-ECU communication."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"For further details or additional examples, feel free to ask!"})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(96540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);