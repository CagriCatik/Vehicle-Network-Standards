"use strict";(self.webpackChunkvns=self.webpackChunkvns||[]).push([[21357],{98499:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"AUTOSAR/rte/client-server-com","title":"**Client/Server Communication in AUTOSAR**","description":"Client/Server communication is one of the key paradigms in AUTOSAR used to facilitate interaction between Software Components (SWCs). It enables the execution of server-side operations invoked by clients.","source":"@site/docs/AUTOSAR/03_rte/10_client-server-com.md","sourceDirName":"AUTOSAR/03_rte","slug":"/AUTOSAR/rte/client-server-com","permalink":"/Vehicle-Network-Standards/docs/AUTOSAR/rte/client-server-com","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/AUTOSAR/03_rte/10_client-server-com.md","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{},"sidebar":"autosarSidebar","previous":{"title":"Sender/Receiver Communication: Data Element Invalidation","permalink":"/Vehicle-Network-Standards/docs/AUTOSAR/rte/sender-receiver-com"},"next":{"title":"**Intra-SWC Communication in AUTOSAR**","permalink":"/Vehicle-Network-Standards/docs/AUTOSAR/rte/intra-swc-com"}}');var i=s(74848),t=s(28453);const l={},o="Client/Server Communication in AUTOSAR",c={},a=[{value:"<strong>Overview</strong>",id:"overview",level:2},{value:"<strong>Synchronous Communication</strong>",id:"synchronous-communication",level:2},{value:"<strong>Key Features</strong>",id:"key-features",level:3},{value:"<strong>Example</strong>:",id:"example",level:3},{value:"<strong>Sequence Diagram</strong>:",id:"sequence-diagram",level:3},{value:"<strong>Asynchronous Communication</strong>",id:"asynchronous-communication",level:2},{value:"<strong>Key Features</strong>",id:"key-features-1",level:3},{value:"<strong>RTE API</strong>:",id:"rte-api",level:3},{value:"<strong>Alternative Approach</strong>:",id:"alternative-approach",level:3},{value:"<strong>Practical Use-Cases</strong>",id:"practical-use-cases",level:2},{value:"<strong>Comparison</strong>",id:"comparison",level:2},{value:"<strong>Conclusion</strong>",id:"conclusion",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"clientserver-communication-in-autosar",children:(0,i.jsx)(n.strong,{children:"Client/Server Communication in AUTOSAR"})})}),"\n",(0,i.jsx)(n.p,{children:"Client/Server communication is one of the key paradigms in AUTOSAR used to facilitate interaction between Software Components (SWCs). It enables the execution of server-side operations invoked by clients."}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:(0,i.jsx)(n.strong,{children:"Overview"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Communication"}),": Follows an n:1 relationship."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Server Call"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"A client invokes an operation on the server."}),"\n",(0,i.jsx)(n.li,{children:"Operations are implemented as Runnables of the Server SWC."}),"\n",(0,i.jsxs)(n.li,{children:["Supports both ",(0,i.jsx)(n.strong,{children:"synchronous"})," and ",(0,i.jsx)(n.strong,{children:"asynchronous"})," operation calls."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Server Runnable Execution"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Executes within:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The task context defined by the AUTOSAR Operating System."}),"\n",(0,i.jsx)(n.li,{children:"The client\u2019s task context in the case of direct function calls."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"synchronous-communication",children:(0,i.jsx)(n.strong,{children:"Synchronous Communication"})}),"\n",(0,i.jsx)(n.p,{children:"In synchronous communication:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The client is blocked until the server completes execution."}),"\n",(0,i.jsxs)(n.li,{children:["The server\u2019s response is passed via the ",(0,i.jsx)(n.code,{children:"OUT"})," parameter of the RTE function."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"key-features",children:(0,i.jsx)(n.strong,{children:"Key Features"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Blocking Mechanism"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The client application halts execution until the server completes the requested operation."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"RTE API"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Example:","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"Std_ReturnType Rte_Call_<p>_<o>(\n    [IN | IN/OUT | OUT <param_1>], ...);\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"example",children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Server Runnable"}),":","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"Std_ReturnType GetTime(uint32 *hour, uint32 *minute, uint32 *second);\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"RTE Client API"}),":","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"Std_ReturnType Rte_Call_<Port>_GetTime(\n    uint32 *hour, uint32 *minute, uint32 *second);\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"sequence-diagram",children:[(0,i.jsx)(n.strong,{children:"Sequence Diagram"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The sequence involves:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Client Application invoking the server operation."}),"\n",(0,i.jsx)(n.li,{children:"The RTE layer forwarding the request to the server SWC."}),"\n",(0,i.jsx)(n.li,{children:"The server SWC processing the request and sending a response."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"asynchronous-communication",children:(0,i.jsx)(n.strong,{children:"Asynchronous Communication"})}),"\n",(0,i.jsx)(n.p,{children:"In asynchronous communication:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The client continues execution without waiting for the server's response."}),"\n",(0,i.jsx)(n.li,{children:"The server provides results later, which can be fetched by polling or waiting."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"key-features-1",children:(0,i.jsx)(n.strong,{children:"Key Features"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Non-blocking"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The client is not halted."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Result Retrieval"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Client can retrieve server results using ",(0,i.jsx)(n.code,{children:"Rte_Result..."})," APIs."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Timeout Handling"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Mechanisms to handle delayed or unresponsive servers."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"rte-api",children:[(0,i.jsx)(n.strong,{children:"RTE API"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Result Retrieval:","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"Std_ReturnType Rte_Result_<p>_<o>(\n    [IN/OUT | OUT <param_1>], ...);\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"alternative-approach",children:[(0,i.jsx)(n.strong,{children:"Alternative Approach"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"RTE activates the client Runnable automatically when results are available."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"practical-use-cases",children:(0,i.jsx)(n.strong,{children:"Practical Use-Cases"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Time Query"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"A client SWC queries the current time from a server SWC in a real-time clock module."}),"\n",(0,i.jsx)(n.li,{children:"Synchronous for immediate results, asynchronous if the client needs to perform other tasks."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Sensor-Actuator Coordination"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Asynchronous communication between a client sensor SWC and an actuator SWC ensures non-blocking operation for critical tasks."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"comparison",children:(0,i.jsx)(n.strong,{children:"Comparison"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:(0,i.jsx)(n.strong,{children:"Feature"})}),(0,i.jsx)(n.th,{children:(0,i.jsx)(n.strong,{children:"Synchronous"})}),(0,i.jsx)(n.th,{children:(0,i.jsx)(n.strong,{children:"Asynchronous"})})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Blocking"})}),(0,i.jsx)(n.td,{children:"Client waits for server"}),(0,i.jsx)(n.td,{children:"Client does not wait for server"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Response Handling"})}),(0,i.jsx)(n.td,{children:"Immediate"}),(0,i.jsx)(n.td,{children:"Polling or callback-based"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Use Case"})}),(0,i.jsx)(n.td,{children:"Critical operations requiring immediate results"}),(0,i.jsx)(n.td,{children:"Background tasks with less critical timing"})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"conclusion",children:(0,i.jsx)(n.strong,{children:"Conclusion"})}),"\n",(0,i.jsx)(n.p,{children:"Client/Server communication is an integral aspect of AUTOSAR architecture, allowing modular, flexible, and efficient design of automotive software. Whether synchronous or asynchronous, the mechanism ensures robust inter-component interaction tailored to the specific requirements of embedded systems in vehicles."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var r=s(96540);const i={},t=r.createContext(i);function l(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);