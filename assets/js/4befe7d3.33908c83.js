"use strict";(self.webpackChunkvns=self.webpackChunkvns||[]).push([[51371],{90250:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"UDS/examples/Tester-Present","title":"Examples - 0x03","description":"Below are realistic examples demonstrating the usage of the Tester Present service (Service ID 0x03) in both Python and CAPL. These examples focus on sending Tester Present requests and handling the response, using the two sub-functions 0x00 (no suppression of response) and 0x80 (suppress response).","source":"@site/docs/UDS/04_examples/09_Tester-Present.md","sourceDirName":"UDS/04_examples","slug":"/UDS/examples/Tester-Present","permalink":"/Vehicle-Network-Standards/docs/UDS/examples/Tester-Present","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/UDS/04_examples/09_Tester-Present.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"udsSidebar","previous":{"title":"Examples - 0x23","permalink":"/Vehicle-Network-Standards/docs/UDS/examples/Write-Memory-by-Adress"},"next":{"title":"Examples - 0x28","permalink":"/Vehicle-Network-Standards/docs/UDS/examples/Communication-Control"}}');var r=n(74848),i=n(28453);const o={sidebar_position:8},a="Examples - 0x03",c={},l=[{value:"Python Example: Tester Present Request",id:"python-example-tester-present-request",level:2},{value:"Prerequisites:",id:"prerequisites",level:3},{value:"Python Code to Send a Tester Present Request:",id:"python-code-to-send-a-tester-present-request",level:3},{value:"Explanation:",id:"explanation",level:3},{value:"Expected Output:",id:"expected-output",level:3},{value:"CAPL Example: Tester Present Request",id:"capl-example-tester-present-request",level:2},{value:"CAPL Code to Send a Tester Present Request:",id:"capl-code-to-send-a-tester-present-request",level:3},{value:"Explanation:",id:"explanation-1",level:3},{value:"Expected Behavior in CANoe:",id:"expected-behavior-in-canoe",level:3},{value:"Practical Considerations:",id:"practical-considerations",level:2}];function d(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"examples---0x03",children:"Examples - 0x03"})}),"\n",(0,r.jsxs)(s.p,{children:["Below are realistic examples demonstrating the usage of the ",(0,r.jsx)(s.strong,{children:"Tester Present"})," service (Service ID 0x03) in both ",(0,r.jsx)(s.strong,{children:"Python"})," and ",(0,r.jsx)(s.strong,{children:"CAPL"}),". These examples focus on sending ",(0,r.jsx)(s.strong,{children:"Tester Present"})," requests and handling the response, using the two sub-functions ",(0,r.jsx)(s.strong,{children:"0x00"})," (no suppression of response) and ",(0,r.jsx)(s.strong,{children:"0x80"})," (suppress response)."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"python-example-tester-present-request",children:"Python Example: Tester Present Request"}),"\n",(0,r.jsxs)(s.p,{children:["In Python, we can use the ",(0,r.jsx)(s.code,{children:"python-can"})," library to simulate sending a ",(0,r.jsx)(s.strong,{children:"Tester Present"})," request over the CAN bus. The ",(0,r.jsx)(s.code,{children:"python-can"})," library allows interaction with CAN interfaces (e.g., USB-to-CAN adapters) to send and receive messages."]}),"\n",(0,r.jsx)(s.h3,{id:"prerequisites",children:"Prerequisites:"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:["Install ",(0,r.jsx)(s.code,{children:"python-can"}),":"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"pip install python-can\n"})}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"Configure the CAN interface (e.g., SocketCAN for Linux or Vector for Windows)."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"python-code-to-send-a-tester-present-request",children:"Python Code to Send a Tester Present Request:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'import can\nimport time\n\n# Initialize CAN interface (adjust for your specific hardware and OS)\ncan_interface = \'can0\'  # Example for Linux (use \'vcan0\' for virtual CAN)\nbus = can.interface.Bus(can_interface, bustype=\'socketcan\')\n\ndef send_tester_present(subfunction):\n    """Sends a Tester Present request (Service ID 0x03)"""\n    message = can.Message(\n        arbitration_id=0x7E0,  # Standard ECU address, change if needed\n        data=[0x03, subfunction],  # Service ID 0x03 and Sub-function\n        is_extended_id=False\n    )\n    \n    try:\n        bus.send(message)\n        print(f"Tester Present (sub-function 0x{subfunction:X}) request sent.")\n    except can.CanError:\n        print("Failed to send Tester Present request.")\n\ndef receive_response():\n    """Waits for the response message and prints it."""\n    while True:\n        message = bus.recv()  # Receive message from the CAN bus\n        if message.arbitration_id == 0x7E8:  # Assuming response is from ECU (change if needed)\n            print(f"Received response: {message.data.hex()}")\n            break\n\n# Send Tester Present with Sub-function 0x00 (no suppression of response)\nsend_tester_present(0x00)\ntime.sleep(0.1)  # Wait to allow ECU response\nreceive_response()\n\n# Send Tester Present with Sub-function 0x80 (suppress response)\nsend_tester_present(0x80)\ntime.sleep(0.1)  # Wait to allow ECU response\nreceive_response()\n'})}),"\n",(0,r.jsx)(s.h3,{id:"explanation",children:"Explanation:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Bus Initialization"}),": The CAN interface is initialized using ",(0,r.jsx)(s.code,{children:"python-can"})," (replace ",(0,r.jsx)(s.code,{children:"'can0'"})," with your actual interface name)."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"send_tester_present()"}),": This function sends the ",(0,r.jsx)(s.strong,{children:"Tester Present"})," request with the given sub-function (0x00 or 0x80).","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["The message structure is built with ",(0,r.jsx)(s.strong,{children:"Service ID 0x03"})," and the appropriate ",(0,r.jsx)(s.strong,{children:"sub-function"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"receive_response()"}),": This function listens for a response on the CAN bus and prints the received data. It assumes a response from the ECU (with ",(0,r.jsx)(s.strong,{children:"arbitration ID 0x7E8"}),")."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"expected-output",children:"Expected Output:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["For ",(0,r.jsx)(s.strong,{children:"Sub-function 0x00"}),", the ECU sends a response (positive response)."]}),"\n",(0,r.jsxs)(s.li,{children:["For ",(0,r.jsx)(s.strong,{children:"Sub-function 0x80"}),", no response is expected (response is suppressed)."]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"capl-example-tester-present-request",children:"CAPL Example: Tester Present Request"}),"\n",(0,r.jsxs)(s.p,{children:["In ",(0,r.jsx)(s.strong,{children:"CAPL"})," (CANoe Programming Language), we can use a similar approach to send the ",(0,r.jsx)(s.strong,{children:"Tester Present"})," service request on the CAN network. CAPL is designed to simulate the communication between ECUs, so the example below demonstrates how you can implement this in a CANoe environment."]}),"\n",(0,r.jsx)(s.h3,{id:"capl-code-to-send-a-tester-present-request",children:"CAPL Code to Send a Tester Present Request:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-capl",children:'variables\n{\n  msTimer testerPresentTimer;\n}\n\non start\n{\n  // Start sending Tester Present requests periodically\n  setTimer(testerPresentTimer, 100);  // Timer to trigger Tester Present every 100 ms\n}\n\non timer testerPresentTimer\n{\n  // Send Tester Present with Sub-function 0x00 (no suppression)\n  outputTesterPresent(0x00);\n  \n  // Reschedule the timer to keep sending Tester Present requests\n  setTimer(testerPresentTimer, 100);  // Send again in 100 ms\n}\n\nvoid outputTesterPresent(int subFunction)\n{\n  message TesterPresentMessage;\n  \n  // Create the Tester Present request message (Service ID 0x03)\n  TesterPresentMessage.byte(0) = 0x03;  // Service ID\n  TesterPresentMessage.byte(1) = subFunction;  // Sub-function (0x00 or 0x80)\n  \n  // Send the message on the CAN bus\n  output(TesterPresentMessage);\n  \n  // Log the sent message\n  write("Sent Tester Present (Sub-function 0x%02X)", subFunction);\n}\n\non message TesterPresentMessage\n{\n  // Handle responses from ECU here\n  if (TesterPresentMessage.byte(0) == 0x03)\n  {\n    // Positive response for Sub-function 0x00\n    write("Received response: Tester Present acknowledged (0x03).");\n  }\n  else\n  {\n    // Handle other cases (e.g., errors)\n    write("Unexpected response received.");\n  }\n}\n'})}),"\n",(0,r.jsx)(s.h3,{id:"explanation-1",children:"Explanation:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Timer Setup"}),": The ",(0,r.jsx)(s.code,{children:"testerPresentTimer"})," is set to trigger every 100 milliseconds. This ensures that the ",(0,r.jsx)(s.strong,{children:"Tester Present"})," request is periodically sent to the ECU."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"outputTesterPresent()"}),": This function creates and sends the ",(0,r.jsx)(s.strong,{children:"Tester Present"})," message with the specified ",(0,r.jsx)(s.strong,{children:"sub-function"}),".","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Sub-function 0x00"})," sends a request without suppressing the response, while ",(0,r.jsx)(s.strong,{children:"Sub-function 0x80"})," suppresses the response."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Message Reception"}),": The ",(0,r.jsx)(s.code,{children:"TesterPresentMessage"})," handler listens for responses from the ECU, specifically for a ",(0,r.jsx)(s.strong,{children:"Service ID 0x03"})," message."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"expected-behavior-in-canoe",children:"Expected Behavior in CANoe:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["The tester sends a ",(0,r.jsx)(s.strong,{children:"Tester Present"})," message every 100 ms."]}),"\n",(0,r.jsxs)(s.li,{children:["The response handler logs the response received from the ECU. If ",(0,r.jsx)(s.strong,{children:"Sub-function 0x00"})," is used, the ECU should reply with a positive response. If ",(0,r.jsx)(s.strong,{children:"Sub-function 0x80"})," is used, no response will be sent."]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"practical-considerations",children:"Practical Considerations:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Timing"}),": In both examples, the timing is crucial. The ",(0,r.jsx)(s.strong,{children:"Tester Present"})," request must be sent periodically, typically at intervals that prevent the ECU from automatically transitioning back to the default session."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Error Handling"}),": Both Python and CAPL examples should include error handling for invalid responses, timeouts, or other issues that could arise during communication with the ECU."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Custom ECUs"}),": The arbitration IDs used in the examples (e.g., ",(0,r.jsx)(s.code,{children:"0x7E0"})," for the tester and ",(0,r.jsx)(s.code,{children:"0x7E8"})," for the ECU) are placeholders. You must adapt these to match the specific CAN IDs used in your test environment."]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsxs)(s.p,{children:["These examples show how the ",(0,r.jsx)(s.strong,{children:"Tester Present"})," service can be implemented in both ",(0,r.jsx)(s.strong,{children:"Python"})," and ",(0,r.jsx)(s.strong,{children:"CAPL"}),", providing a clear view of how diagnostic testers maintain a non-default session and keep the ECU active during extended or programming sessions."]})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>a});var t=n(96540);const r={},i=t.createContext(r);function o(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:s},e.children)}}}]);