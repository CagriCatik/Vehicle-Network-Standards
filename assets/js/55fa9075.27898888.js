"use strict";(self.webpackChunkvns=self.webpackChunkvns||[]).push([[92101],{56026:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>h,contentTitle:()=>d,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"CAN/datensicherung/fehlerverfolgung","title":"Fehlerbehandlung","description":"Das Controller Area Network (CAN) ist ein robustes Fahrzeugbussystem, das haupts\xe4chlich in der Automobilindustrie verwendet wird, um Mikrocontroller und Ger\xe4te ohne Host-Computer miteinander zu verbinden. Um die Netzwerkkonsistenz und -stabilit\xe4t zu gew\xe4hrleisten, ist es wichtig, Mechanismen zu haben, die Fehler erkennen und behandeln. Dieses Tutorial erkl\xe4rt die Fehlerbehandlungsmechanismen des CAN-Protokolls im Detail und zeigt auf, wie Fehlerz\xe4hler (Transmit Error Counter, TEC, und Receive Error Counter, REC) dazu beitragen, Busblockaden zu vermeiden.","source":"@site/docs/CAN/05_datensicherung/07_fehlerverfolgung.md","sourceDirName":"CAN/05_datensicherung","slug":"/CAN/datensicherung/fehlerverfolgung","permalink":"/Vehicle-Network-Standards/docs/CAN/datensicherung/fehlerverfolgung","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/CAN/05_datensicherung/07_fehlerverfolgung.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{},"sidebar":"canSidebar","previous":{"title":"Fehlerbehandlung","permalink":"/Vehicle-Network-Standards/docs/CAN/datensicherung/logische-fehlerbehandlung"},"next":{"title":"Motivation","permalink":"/Vehicle-Network-Standards/docs/CAN/CAN-FD/motivation"}}');var s=r(74848),t=r(28453);const l={},d="Fehlerbehandlung",h={},o=[{value:"Fehlererkennung und Fehlerverfolgung im CAN-Netzwerk",id:"fehlererkennung-und-fehlerverfolgung-im-can-netzwerk",level:2},{value:"Busblockade vermeiden",id:"busblockade-vermeiden",level:3},{value:"Fehlerz\xe4hler: TEC und REC",id:"fehlerz\xe4hler-tec-und-rec",level:3},{value:"Fehlerzust\xe4nde im CAN-Controller",id:"fehlerzust\xe4nde-im-can-controller",level:3},{value:"Error Active",id:"error-active",level:4},{value:"Error Passive",id:"error-passive",level:4},{value:"Bus Off",id:"bus-off",level:4}];function a(e){const n={h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"fehlerbehandlung",children:"Fehlerbehandlung"})}),"\n",(0,s.jsx)(n.p,{children:"Das Controller Area Network (CAN) ist ein robustes Fahrzeugbussystem, das haupts\xe4chlich in der Automobilindustrie verwendet wird, um Mikrocontroller und Ger\xe4te ohne Host-Computer miteinander zu verbinden. Um die Netzwerkkonsistenz und -stabilit\xe4t zu gew\xe4hrleisten, ist es wichtig, Mechanismen zu haben, die Fehler erkennen und behandeln. Dieses Tutorial erkl\xe4rt die Fehlerbehandlungsmechanismen des CAN-Protokolls im Detail und zeigt auf, wie Fehlerz\xe4hler (Transmit Error Counter, TEC, und Receive Error Counter, REC) dazu beitragen, Busblockaden zu vermeiden."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"CAN-Netzwerk",src:r(5190).A+"",width:"842",height:"724"})}),"\n",(0,s.jsx)(n.h2,{id:"fehlererkennung-und-fehlerverfolgung-im-can-netzwerk",children:"Fehlererkennung und Fehlerverfolgung im CAN-Netzwerk"}),"\n",(0,s.jsx)(n.h3,{id:"busblockade-vermeiden",children:"Busblockade vermeiden"}),"\n",(0,s.jsx)(n.p,{children:"Im CAN-Netzwerk hat jeder Knoten die M\xf6glichkeit, eine als fehlerhaft interpretierte CAN-Nachricht abzubrechen. Dies gilt auch f\xfcr F\xe4lle, in denen ein Knoten irrt\xfcmlich eine korrekte Nachricht als fehlerhaft erkennt. Um zu verhindern, dass solche Fehlinterpretationen zu einer Blockierung des \xdcbertragungsmediums f\xfchren, verwendet das CAN-Protokoll eine Fehlerverfolgung. Diese Fehlerverfolgung unterscheidet zwischen gelegentlich auftretenden und anhaltenden St\xf6rungen."}),"\n",(0,s.jsx)(n.h3,{id:"fehlerz\xe4hler-tec-und-rec",children:"Fehlerz\xe4hler: TEC und REC"}),"\n",(0,s.jsx)(n.p,{children:"Jeder CAN-Controller f\xfchrt zwei Arten von Fehlerz\xe4hlern:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Transmit Error Counter (TEC):"})," Dieser Z\xe4hler wird bei der \xdcbertragung von Nachrichten verwendet."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Receive Error Counter (REC):"})," Dieser Z\xe4hler wird beim Empfang von Nachrichten verwendet."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Die Z\xe4hler werden nach spezifischen Regeln angepasst:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Erfolgreiche \xdcbertragung einer Daten- oder Fernanforderungsnachricht: TEC = TEC - 1; REC = REC - 1"}),"\n",(0,s.jsxs)(n.li,{children:["Erkennung und \xdcbertragung eines Fehler-Flags:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Sender: TEC = TEC + 8"}),"\n",(0,s.jsx)(n.li,{children:"Fehlererkennender Empf\xe4nger: REC = REC + 1"}),"\n",(0,s.jsx)(n.li,{children:"Fehlerverursachender Empf\xe4nger: REC = REC + 8"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"fehlerzust\xe4nde-im-can-controller",children:"Fehlerzust\xe4nde im CAN-Controller"}),"\n",(0,s.jsx)(n.h4,{id:"error-active",children:"Error Active"}),"\n",(0,s.jsxs)(n.p,{children:["Ein CAN-Controller startet im Zustand ",(0,s.jsx)(n.strong,{children:"Error Active"}),". In diesem Zustand kann der Controller nach der Detektion eines Fehlers ein aktives Fehler-Flag senden, das aus sechs dominanten Bits besteht. Dies signalisiert anderen Knoten im Netzwerk, dass ein Fehler aufgetreten ist."]}),"\n",(0,s.jsx)(n.h4,{id:"error-passive",children:"Error Passive"}),"\n",(0,s.jsxs)(n.p,{children:["Wenn der Fehlerz\xe4hler einen bestimmten Schwellenwert \xfcberschreitet (TEC > 127 oder REC > 127), wechselt der CAN-Controller in den Zustand ",(0,s.jsx)(n.strong,{children:"Error Passive"}),'. In diesem Zustand kann der Controller nur noch ein passives Fehler-Flag senden, das aus sechs rezessiven Bits besteht. Dadurch wird die F\xe4higkeit des Controllers eingeschr\xe4nkt, Fehler global im Netzwerk zu signalisieren. Zus\xe4tzlich muss ein Controller im Zustand Error Passive beim Senden von zwei aufeinanderfolgenden Daten- oder Fernanforderungsnachrichten eine zus\xe4tzliche "Suspend Transmission Time" von 8 Bits einhalten.']}),"\n",(0,s.jsx)(n.h4,{id:"bus-off",children:"Bus Off"}),"\n",(0,s.jsxs)(n.p,{children:["Bei extremer Fehlerh\xe4ufung oder einem Ausfall wechselt der CAN-Controller in den Zustand ",(0,s.jsx)(n.strong,{children:"Bus Off"}),". In diesem Zustand trennt sich der Controller vom CAN-Bus, um zu verhindern, dass der fehlerhafte Knoten das Netzwerk weiter st\xf6rt. Der Zustand Bus Off kann nur durch einen Eingriff des Hosts (mit einer erzwungenen Wartezeit von 128 x 11 Bits) oder durch einen Hardware-Reset verlassen werden."]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},5190:(e,n,r)=>{r.d(n,{A:()=>i});const i=r.p+"assets/images/1712276783501-03490aebc458cbdffcbd1130341c40fa.png"},28453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>d});var i=r(96540);const s={},t=i.createContext(s);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);