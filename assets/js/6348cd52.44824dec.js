"use strict";(self.webpackChunkvns=self.webpackChunkvns||[]).push([[12882],{5572:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>h,frontMatter:()=>d,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"SOME-IP/someip/request-response","title":"Request/Response - Methodenaufruf","description":"3.3 Request/Response - Methodenaufruf in SOME/IP","source":"@site/docs/SOME-IP/03_someip/03_request-response.md","sourceDirName":"SOME-IP/03_someip","slug":"/SOME-IP/someip/request-response","permalink":"/Vehicle-Network-Standards/docs/SOME-IP/someip/request-response","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/SOME-IP/03_someip/03_request-response.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"someipSidebar","previous":{"title":"Typen von Services","permalink":"/Vehicle-Network-Standards/docs/SOME-IP/someip/services"},"next":{"title":"Fire and Forget - Methodenaufruf","permalink":"/Vehicle-Network-Standards/docs/SOME-IP/someip/fire-and-forget"}}');var i=s(74848),t=s(28453);const d={},l="Request/Response - Methodenaufruf",u={},o=[{value:"3.3 <strong>Request/Response - Methodenaufruf in SOME/IP</strong>",id:"33-requestresponse---methodenaufruf-in-someip",level:2},{value:"3.3.1 <strong>Einf\xfchrung in das Request/Response-Muster</strong>",id:"331-einf\xfchrung-in-das-requestresponse-muster",level:3},{value:"3.3.2 <strong>Verwendung des Request/Response-Musters in SOME/IP</strong>",id:"332-verwendung-des-requestresponse-musters-in-someip",level:3},{value:"3.3.3 <strong>Beispiele f\xfcr Request/Response in der Automobilindustrie</strong>",id:"333-beispiele-f\xfcr-requestresponse-in-der-automobilindustrie",level:3},{value:"3.3.4 <strong>Vorteile des Request/Response-Musters</strong>",id:"334-vorteile-des-requestresponse-musters",level:3},{value:"3.3.5 <strong>Best Practices f\xfcr die Implementierung des Request/Response-Musters</strong>",id:"335-best-practices-f\xfcr-die-implementierung-des-requestresponse-musters",level:3},{value:"3.3.6 <strong>Zusammenfassung</strong>",id:"336-zusammenfassung",level:3}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"requestresponse---methodenaufruf",children:"Request/Response - Methodenaufruf"})}),"\n",(0,i.jsxs)(n.h2,{id:"33-requestresponse---methodenaufruf-in-someip",children:["3.3 ",(0,i.jsx)(n.strong,{children:"Request/Response - Methodenaufruf in SOME/IP"})]}),"\n",(0,i.jsx)(n.p,{children:"Das Request/Response-Kommunikationsmuster ist ein grundlegender Bestandteil des SOME/IP-Protokolls und spielt eine zentrale Rolle bei der Interaktion zwischen Diensten in modernen Fahrzeugnetzwerken. Diese Methode erm\xf6glicht die Kommunikation zwischen einem Client und einem Server, bei der der Client eine Anforderung (Request) stellt und der Server eine entsprechende Antwort (Response) zur\xfccksendet. In diesem Abschnitt wird das Request/Response-Kommunikationsmuster in SOME/IP detailliert erkl\xe4rt, einschlie\xdflich typischer Anwendungsf\xe4lle und der Vorteile dieser Kommunikationsmethode."}),"\n",(0,i.jsxs)(n.h3,{id:"331-einf\xfchrung-in-das-requestresponse-muster",children:["3.3.1 ",(0,i.jsx)(n.strong,{children:"Einf\xfchrung in das Request/Response-Muster"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Definition und Funktionsweise:"}),"\nDas Request/Response-Muster in SOME/IP ist ein synchrones Kommunikationsmuster, bei dem ein Client eine spezifische Anfrage an einen Server sendet, der daraufhin die angeforderte Aktion ausf\xfchrt und eine Antwort zur\xfcckgibt. Dieses Muster ist vergleichbar mit einem Remote Procedure Call (RPC), bei dem eine Funktion aus der Ferne aufgerufen wird, als ob sie lokal auf dem Client ausgef\xfchrt w\xfcrde."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Hauptmerkmale:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Synchrone Kommunikation:"})," Der Client wartet auf die Antwort des Servers, bevor er mit der n\xe4chsten Aufgabe fortf\xe4hrt."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Serviceorientierung:"})," Die Kommunikation erfolgt zwischen Diensten, die klar definierte Schnittstellen und Methoden haben."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Zuverl\xe4ssigkeit:"})," SOME/IP stellt sicher, dass die Nachrichten\xfcbermittlung zuverl\xe4ssig ist und dass sowohl Anfragen als auch Antworten korrekt empfangen werden."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Diagramm: Request/Response-Kommunikationsmuster"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"+-------------------------------------------------------------+\n|                  Request/Response-Muster in SOME/IP         |\n| +---------------------------------------------------------+ |\n| |  Client (z.B. Steuerger\xe4t A)                            | |\n| |  - Sendet Request: Fordert Aktion vom Server an         | |\n| |  - Wartet auf Response: Antwort des Servers             | |\n| +---------------------------------------------------------+ |\n|               |                              |               |\n|               v                              v               |\n| +---------------------------------------------------------+ |\n| |  Server (z.B. Steuerger\xe4t B)                            | |\n| |  - Empf\xe4ngt Request: F\xfchrt angeforderte Aktion aus      | |\n| |  - Sendet Response: Antwort zur\xfcck an den Client        | |\n+-------------------------------------------------------------+\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"332-verwendung-des-requestresponse-musters-in-someip",children:["3.3.2 ",(0,i.jsx)(n.strong,{children:"Verwendung des Request/Response-Musters in SOME/IP"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Schritte im Request/Response-Prozess:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Client-Request:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Der Client sendet eine Anforderung an einen Server. Diese Anforderung enth\xe4lt typischerweise den Namen der Methode, die ausgef\xfchrt werden soll, sowie die Parameter, die f\xfcr die Ausf\xfchrung der Methode erforderlich sind."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Server-Processing:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Der Server empf\xe4ngt die Anforderung und verarbeitet sie. Dies kann die Ausf\xfchrung einer bestimmten Funktion, die Abfrage eines Datenwertes oder eine andere vordefinierte Aktion umfassen."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Server-Response:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Nach der Verarbeitung der Anforderung sendet der Server eine Antwort zur\xfcck an den Client. Diese Antwort enth\xe4lt in der Regel das Ergebnis der durchgef\xfchrten Aktion oder den angeforderten Datenwert."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Client-Verarbeitung:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Der Client empf\xe4ngt die Antwort des Servers und verarbeitet die erhaltenen Informationen weiter. Abh\xe4ngig vom Ergebnis der Antwort kann der Client weitere Aktionen ausf\xfchren oder die Kommunikation abschlie\xdfen."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Typische Nachrichtenstruktur in SOME/IP:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Header:"})," Enth\xe4lt Informationen wie die Nachrichtentypen, Service- und Method-IDs sowie L\xe4ngeninformationen."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Payload:"})," Beinhaltet die eigentlichen Daten oder Parameter, die im Request oder in der Response \xfcbertragen werden."]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"333-beispiele-f\xfcr-requestresponse-in-der-automobilindustrie",children:["3.3.3 ",(0,i.jsx)(n.strong,{children:"Beispiele f\xfcr Request/Response in der Automobilindustrie"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Beispiel 1: Motorsteuerung"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Anwendung:"})," In einem Fahrzeug fordert das Steuerger\xe4t f\xfcr die Klimatisierung (Client) vom Motorsteuerger\xe4t (Server) den aktuellen Motortemperaturwert an, um die L\xfcfterdrehzahl entsprechend anzupassen."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Prozess:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Request:"})," Das Klimasteuerger\xe4t sendet eine Anfrage an das Motorsteuerger\xe4t, um die aktuelle Motortemperatur abzufragen."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Response:"})," Das Motorsteuerger\xe4t empf\xe4ngt die Anfrage, liest den aktuellen Temperaturwert aus und sendet diesen zur\xfcck an das Klimasteuerger\xe4t."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Verarbeitung:"})," Das Klimasteuerger\xe4t passt die L\xfcfterdrehzahl basierend auf der erhaltenen Temperatur an."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Diagramm: Request/Response f\xfcr Motortemperatur"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"+-------------------------------------------------------------+\n|                  Motortemperatur-Anfrage                    |\n| +---------------------------------------------------------+ |\n| |  Client (z.B. Klimasteuerger\xe4t)                         | |\n| |  - Sendet Request: Abfrage Motortemperatur              | |\n| +---------------------------------------------------------+ |\n|               |                              |               |\n|               v                              v               |\n| +---------------------------------------------------------+ |\n| |  Server (z.B. Motorsteuerger\xe4t)                        | |\n| |  - Empf\xe4ngt Request                                    | |\n| |  - Sendet Response: Aktuelle Temperatur zur\xfcck         | |\n+-------------------------------------------------------------+\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Beispiel 2: Infotainment-System"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Anwendung:"})," Ein Infotainment-System (Client) fordert vom Navigationsmodul (Server) die n\xe4chste Anweisung zur Routenf\xfchrung an."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Prozess:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Request:"})," Das Infotainment-System sendet eine Anfrage zur n\xe4chsten Fahranweisung."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Response:"})," Das Navigationsmodul berechnet die n\xe4chste Anweisung und sendet diese als Antwort zur\xfcck."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Verarbeitung:"})," Die Anweisung wird auf dem Bildschirm des Infotainment-Systems angezeigt oder als Sprachansage wiedergegeben."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Diagramm: Request/Response f\xfcr Navigationsanweisung"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"+-------------------------------------------------------------+\n|                Anfrage zur Navigationsanweisung             |\n| +---------------------------------------------------------+ |\n| |  Client (z.B. Infotainment-System)                      | |\n| |  - Sendet Request: N\xe4chste Anweisung anfordern          | |\n| +---------------------------------------------------------+ |\n|               |                              |               |\n|               v                              v               |\n| +---------------------------------------------------------+ |\n| |  Server (z.B. Navigationsmodul)                        | |\n| |  - Empf\xe4ngt Request                                    | |\n| |  - Sendet Response: N\xe4chste Anweisung zur\xfcck           | |\n+-------------------------------------------------------------+\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"334-vorteile-des-requestresponse-musters",children:["3.3.4 ",(0,i.jsx)(n.strong,{children:"Vorteile des Request/Response-Musters"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"1. Eindeutige Steuerung und Verl\xe4sslichkeit:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Das Request/Response-Muster stellt sicher, dass jede Anfrage eine entsprechende Antwort erh\xe4lt. Dies ist besonders n\xfctzlich in sicherheitskritischen Anwendungen, bei denen es wichtig ist, dass Anfragen zuverl\xe4ssig bearbeitet werden."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"2. Einfachheit und Verst\xe4ndlichkeit:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Das Konzept ist einfach und weit verbreitet, was die Implementierung und Wartung erleichtert. Da das Muster synchron ist, ist der Kommunikationsfluss leicht nachvollziehbar und Fehler lassen sich schnell identifizieren."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"3. Flexibilit\xe4t:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Das Request/Response-Muster ist vielseitig und kann in einer Vielzahl von Anwendungsf\xe4llen eingesetzt werden, von einfachen Datenabfragen bis hin zu komplexen, mehrstufigen Steuerungsprozessen."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"4. Integration in Service-orientierte Architekturen:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Request/Response ist ideal f\xfcr die Implementierung in serviceorientierten Architekturen wie SOME/IP, da es die lose Kopplung von Diensten unterst\xfctzt und eine einfache Interaktion zwischen verschiedenen Komponenten erm\xf6glicht."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Diagramm: Vorteile des Request/Response-Musters"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"+-------------------------------------------------------------+\n|                  Vorteile des Request/Response-Musters      |\n| +---------------------------------------------------------+ |\n| |  Eindeutige Steuerung                                    | |\n| |  - Zuverl\xe4ssigkeit durch erwartete Antwort               | |\n| +---------------------------------------------------------+ |\n| |  Einfachheit und Verst\xe4ndlichkeit                        | |\n| |  - Leicht nachvollziehbarer Kommunikationsfluss          | |\n| +---------------------------------------------------------+ |\n| |  Flexibilit\xe4t                                            | |\n| |  - Einsetzbar in verschiedenen Anwendungsf\xe4llen          | |\n| +---------------------------------------------------------+ |\n| |  Integration in SOA                                      | |\n| |  - Unterst\xfctzt lose Kopplung und einfache Interaktion    | |\n+-------------------------------------------------------------+\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"335-best-practices-f\xfcr-die-implementierung-des-requestresponse-musters",children:["3.3.5 ",(0,i.jsx)(n.strong,{children:"Best Practices f\xfcr die Implementierung des Request/Response-Musters"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"1. Zeitlimits und Timeouts einrichten:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Stellen Sie sicher, dass f\xfcr jede Anfrage ein angemessenes Zeitlimit festgelegt wird, um festzustellen, ob eine Antwort vom Server erwartet wird. Dies verhindert, dass der Client auf eine Antwort wartet, die m\xf6glicherweise nie ankommt, und erm\xf6glicht es, Fehlerzust\xe4nde fr\xfchzeitig zu erkennen."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"2. Fehlerbehandlung und Wiederholungsmechanismen:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Implementieren Sie robuste Fehlerbehandlungsroutinen, die auf verschiedene Fehlerzust\xe4nde reagieren, wie z. B. Kommunikationsfehler oder nicht verf\xfcgbare Dienste. Wiederholungsmechanismen sollten eingerichtet werden, um fehlgeschlagene Anfragen zu wiederholen, falls erforderlich."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"3. Nutzung von Service-IDs und Method-IDs:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Verwenden Sie eindeutige Service-IDs und Method-IDs, um sicherzustellen, dass Anfragen korrekt adressiert und verarbeitet werden. Dies ist besonders wichtig in komplexen Systemen mit vielen Diensten und Methoden."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"4. \xdcberwachung und Protokollierung:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\xdcberwachen Sie die Kommunikation zwischen Clients und Servern, und protokollieren Sie Anfragen und Antworten, um die Fehlerbehebung zu erleichtern und die Leistung des Systems zu \xfcberwachen."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Diagramm: Best Practices f\xfcr Request/Response"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"+-------------------------------------------------------------+\n|               Best Practices f\xfcr Request/Response           |\n| +---------------------------------------------------------+ |\n| |  Zeitlimits und Timeouts                                 | |\n| |  - Verhindern h\xe4ngende Anfragen                          | |\n| +---------------------------------------------------------+ |\n| |  Fehlerbehandlung und Wiederholung                       | |\n| |  - Robuste Fehlerbehandlung und Wiederholungsmechanismen | |\n| +---------------------------------------------------------+ |\n| |  Nutzung von Service- und Method-IDs                     | |\n| |  - Eindeutige Identifizierung von Anfragen               | |\n| +---------------------------------------------------------+ |\n| |  \xdcberwachung und Protokollierung                         | |\n| |  - Erleichtert Fehlerbehebung und Leistungs\xfcberwachung   | |\n+-------------------------------------------------------------+\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"336-zusammenfassung",children:["3.3.6 ",(0,i.jsx)(n.strong,{children:"Zusammenfassung"})]}),"\n",(0,i.jsx)(n.p,{children:"Das Request/Response-Muster ist ein zentrales Kommunikationsmuster in SOME/IP und bietet eine zuverl\xe4ssige, flexible und leicht verst\xe4ndliche M\xf6glichkeit, Dienste in einem Fahrzeugnetzwerk zu implementieren und zu steuern. Durch die Verwendung dieses Musters k\xf6nnen Fahrzeugfunktionen effizient gesteuert und \xfcberwacht werden, was es zu einem wichtigen Bestandteil moderner, serviceorientierter Architekturen in der Automobilindustrie macht. Die Implementierung von Best Practices wie Zeitlimits, Fehlerbehandlung und \xdcberwachung stellt sicher, dass das Request/Response-Muster effektiv und zuverl\xe4ssig in verschiedenen Anwendungsf\xe4llen eingesetzt werden kann."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"Dieses Kapitel bietet einen tiefen Einblick in das Request/Response-Muster von SOME/IP und erkl\xe4rt dessen Funktionsweise, typische Anwendungsf\xe4lle und die Vorteile, die es f\xfcr die Implementierung von Fahrzeugdiensten bietet. Ingenieure und technische Fachkr\xe4fte k\xf6nnen diese Informationen nutzen, um robuste und effiziente Kommunikationssysteme in modernen Fahrzeugen zu entwickeln."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>l});var r=s(96540);const i={},t=r.createContext(i);function d(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);