"use strict";(self.webpackChunkvns=self.webpackChunkvns||[]).push([[23493],{19864:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"AUTOSAR/application/runnables","title":"Runnables","description":"In AUTOSAR, Runnables are the fundamental executable units within Atomic Software Components (SWCs). They define the actual behavior of an SWC and are invoked by the Runtime Environment (RTE) based on specific triggers, such as timer events, received data, or operation calls. This document explains the concept, structure, and implementation of Runnables in the AUTOSAR Classic Platform.","source":"@site/docs/AUTOSAR/02_application/10_runnables.md","sourceDirName":"AUTOSAR/02_application","slug":"/AUTOSAR/application/runnables","permalink":"/Vehicle-Network-Standards/docs/AUTOSAR/application/runnables","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/AUTOSAR/02_application/10_runnables.md","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{},"sidebar":"autosarSidebar","previous":{"title":"Client-Server Communication","permalink":"/Vehicle-Network-Standards/docs/AUTOSAR/application/client_server"},"next":{"title":"Runnable Scheduling and Exercises","permalink":"/Vehicle-Network-Standards/docs/AUTOSAR/application/exercise"}}');var r=i(74848),t=i(28453);const l={},a="Runnables",o={},d=[{value:"<strong>1. What are Runnables?</strong>",id:"1-what-are-runnables",level:2},{value:"<strong>Definition</strong>",id:"definition",level:3},{value:"<strong>Key Features</strong>",id:"key-features",level:3},{value:"<strong>2. Runnable Structure</strong>",id:"2-runnable-structure",level:2},{value:"<strong>Atomic Software Component Example</strong>",id:"atomic-software-component-example",level:3},{value:"<strong>Implementation</strong>:",id:"implementation",level:3},{value:"Runnable Example Code:",id:"runnable-example-code",level:4},{value:"<strong>3. Trigger Mechanisms</strong>",id:"3-trigger-mechanisms",level:2},{value:"<strong>3.1 Timer Triggers</strong>",id:"31-timer-triggers",level:3},{value:"<strong>3.2 Data Reception</strong>",id:"32-data-reception",level:3},{value:"<strong>3.3 Operation Calls</strong>",id:"33-operation-calls",level:3},{value:"<strong>4. Communication with RTE</strong>",id:"4-communication-with-rte",level:2},{value:"Code Example:",id:"code-example",level:4},{value:"<strong>5. Runnable Timing and Scheduling</strong>",id:"5-runnable-timing-and-scheduling",level:2},{value:"<strong>5.1 Timing</strong>",id:"51-timing",level:3},{value:"<strong>5.2 Scheduling</strong>",id:"52-scheduling",level:3},{value:"<strong>6. Advantages of Runnables</strong>",id:"6-advantages-of-runnables",level:2},{value:"<strong>6.1 Modularity</strong>",id:"61-modularity",level:3},{value:"<strong>6.2 Reusability</strong>",id:"62-reusability",level:3},{value:"<strong>6.3 Scalability</strong>",id:"63-scalability",level:3},{value:"<strong>6.4 Determinism</strong>",id:"64-determinism",level:3},{value:"<strong>7. Use Case: Door Monitoring System</strong>",id:"7-use-case-door-monitoring-system",level:2},{value:"<strong>8. Summary</strong>",id:"8-summary",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"runnables",children:"Runnables"})}),"\n",(0,r.jsxs)(n.p,{children:["In AUTOSAR, ",(0,r.jsx)(n.strong,{children:"Runnables"})," are the fundamental executable units within ",(0,r.jsx)(n.strong,{children:"Atomic Software Components (SWCs)"}),". They define the actual behavior of an SWC and are invoked by the ",(0,r.jsx)(n.strong,{children:"Runtime Environment (RTE)"})," based on specific triggers, such as timer events, received data, or operation calls. This document explains the concept, structure, and implementation of Runnables in the AUTOSAR Classic Platform."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"1-what-are-runnables",children:(0,r.jsx)(n.strong,{children:"1. What are Runnables?"})}),"\n",(0,r.jsx)(n.h3,{id:"definition",children:(0,r.jsx)(n.strong,{children:"Definition"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A Runnable is a function within an Atomic SWC that implements a specific part of the component\u2019s behavior."}),"\n",(0,r.jsx)(n.li,{children:"It is the smallest schedulable unit in the AUTOSAR architecture."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"key-features",children:(0,r.jsx)(n.strong,{children:"Key Features"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Internal Behavior"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Runnables encapsulate the functional logic of an SWC."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Trigger Mechanism"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Invoked by the RTE when predefined triggers occur (e.g., timer expiration, data reception, or service calls)."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Flexibility"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Multiple Runnables can exist within a single SWC to implement various functionalities."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"2-runnable-structure",children:(0,r.jsx)(n.strong,{children:"2. Runnable Structure"})}),"\n",(0,r.jsx)(n.h3,{id:"atomic-software-component-example",children:(0,r.jsx)(n.strong,{children:"Atomic Software Component Example"})}),"\n",(0,r.jsxs)(n.p,{children:["In the provided image, the ",(0,r.jsx)(n.strong,{children:"Left Door"})," SWC contains a Runnable named ",(0,r.jsx)(n.code,{children:"SA_Left"}),"."]}),"\n",(0,r.jsxs)(n.h3,{id:"implementation",children:[(0,r.jsx)(n.strong,{children:"Implementation"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The Runnable is triggered every 200 milliseconds."}),"\n",(0,r.jsx)(n.li,{children:"It reads the door status and sends it to the RTE for further processing."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"runnable-example-code",children:"Runnable Example Code:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"// Runnable triggered every 200 msec\nvoid SA_Left(void) {\n    /* Example implementation start */\n    Std_ReturnType status;\n    boolean DoorOpen;\n\n    // Logic to determine the door state (e.g., from a sensor)\n    DoorOpen = ReadDoorSensor();\n\n    // Write the door state to the RTE for other components to use\n    status = Rte_Write_<Port>_<Data>(DoorOpen);\n\n    /* Example implementation end */\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"3-trigger-mechanisms",children:(0,r.jsx)(n.strong,{children:"3. Trigger Mechanisms"})}),"\n",(0,r.jsx)(n.p,{children:"Runnables are executed when specific triggers occur. Common trigger types include:"}),"\n",(0,r.jsx)(n.h3,{id:"31-timer-triggers",children:(0,r.jsx)(n.strong,{children:"3.1 Timer Triggers"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Invoked periodically based on a timer configured in the RTE."}),"\n",(0,r.jsxs)(n.li,{children:["Example: ",(0,r.jsx)(n.code,{children:"SA_Left"})," is triggered every 200 ms."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"32-data-reception",children:(0,r.jsx)(n.strong,{children:"3.2 Data Reception"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Triggered when new data is received by the SWC via its Require Port (R-Port)."}),"\n",(0,r.jsx)(n.li,{children:"Example: A Runnable processes updated sensor data from another SWC."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"33-operation-calls",children:(0,r.jsx)(n.strong,{children:"3.3 Operation Calls"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Triggered when a service or operation is invoked by another SWC or RTE."}),"\n",(0,r.jsx)(n.li,{children:"Example: A diagnostic operation request triggers a Runnable to process the request."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"4-communication-with-rte",children:(0,r.jsx)(n.strong,{children:"4. Communication with RTE"})}),"\n",(0,r.jsx)(n.p,{children:"Runnables interact with the RTE to:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Read Inputs"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Access data from Require Ports (R-Ports)."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Write Outputs"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Send data to Provide Ports (P-Ports)."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Call Services"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Invoke server operations or services."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"code-example",children:"Code Example:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Reading Data from RTE"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"boolean DoorOpen;\nRte_Read_<Port>_<Data>(&DoorOpen);  // Read door status from RTE\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Writing Data to RTE"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"Rte_Write_<Port>_<Data>(DoorOpen);  // Write door status to RTE\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"5-runnable-timing-and-scheduling",children:(0,r.jsx)(n.strong,{children:"5. Runnable Timing and Scheduling"})}),"\n",(0,r.jsx)(n.h3,{id:"51-timing",children:(0,r.jsx)(n.strong,{children:"5.1 Timing"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The timing for Runnable execution is defined in the RTE configuration."}),"\n",(0,r.jsx)(n.li,{children:"Timers ensure deterministic behavior, especially for safety-critical systems."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"52-scheduling",children:(0,r.jsx)(n.strong,{children:"5.2 Scheduling"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Runnables are mapped to tasks, and their execution order is determined by the OS scheduler."}),"\n",(0,r.jsx)(n.li,{children:"Priority and timing constraints are managed to meet real-time requirements."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"6-advantages-of-runnables",children:(0,r.jsx)(n.strong,{children:"6. Advantages of Runnables"})}),"\n",(0,r.jsx)(n.h3,{id:"61-modularity",children:(0,r.jsx)(n.strong,{children:"6.1 Modularity"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Runnables encapsulate specific functionality, enabling modular development and testing."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"62-reusability",children:(0,r.jsx)(n.strong,{children:"6.2 Reusability"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Atomic SWCs and their Runnables can be reused across projects with minimal changes."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"63-scalability",children:(0,r.jsx)(n.strong,{children:"6.3 Scalability"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Multiple Runnables can be added to a single SWC to implement additional features."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"64-determinism",children:(0,r.jsx)(n.strong,{children:"6.4 Determinism"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Timers and trigger-based execution ensure predictable behavior."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"7-use-case-door-monitoring-system",children:(0,r.jsx)(n.strong,{children:"7. Use Case: Door Monitoring System"})}),"\n",(0,r.jsx)(n.p,{children:"In the provided example:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.strong,{children:"Left Door"})," SWC monitors the state of the door using a sensor."]}),"\n",(0,r.jsxs)(n.li,{children:["The Runnable ",(0,r.jsx)(n.code,{children:"SA_Left"})," executes every 200 ms to:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Read the door state (open/closed)."}),"\n",(0,r.jsx)(n.li,{children:"Send the state to the RTE for other components (e.g., lighting control) to process."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"8-summary",children:(0,r.jsx)(n.strong,{children:"8. Summary"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Runnables"})," are essential building blocks in the AUTOSAR architecture, providing a mechanism to implement and execute the functional behavior of SWCs. By leveraging triggers and RTE interaction, Runnables enable modular, reusable, and scalable development of automotive software systems."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>a});var s=i(96540);const r={},t=s.createContext(r);function l(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);