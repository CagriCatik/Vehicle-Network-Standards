"use strict";(self.webpackChunkvns=self.webpackChunkvns||[]).push([[2905],{17144:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"AUTOSAR/application/distribution_components","title":"Distribution of Components","description":"This document details the distributed software architecture in an AUTOSAR-based lighting control system, as shown in the diagram. The components are distributed across multiple ECUs (Electronic Control Units), with communication managed by the Runtime Environment (RTE) and the underlying Basic Software (BSW).","source":"@site/docs/AUTOSAR/02_application/04_distribution_components.md","sourceDirName":"AUTOSAR/02_application","slug":"/AUTOSAR/application/distribution_components","permalink":"/Vehicle-Network-Standards/docs/AUTOSAR/application/distribution_components","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/AUTOSAR/02_application/04_distribution_components.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{},"sidebar":"autosarSidebar","previous":{"title":"Virtual Function Bus","permalink":"/Vehicle-Network-Standards/docs/AUTOSAR/application/communication"},"next":{"title":"Types of Software Components","permalink":"/Vehicle-Network-Standards/docs/AUTOSAR/application/types_swc"}}');var t=i(74848),r=i(28453);const o={},l="Distribution of Components",a={},c=[{value:"<strong>1. Overview of ECU Distribution</strong>",id:"1-overview-of-ecu-distribution",level:2},{value:"<strong>1.1 Roof ECU</strong>",id:"11-roof-ecu",level:3},{value:"<strong>1.2 Front ECU</strong>",id:"12-front-ecu",level:3},{value:"<strong>1.3 Communication Bus</strong>",id:"13-communication-bus",level:3},{value:"<strong>2. Architectural Layers</strong>",id:"2-architectural-layers",level:2},{value:"<strong>2.1 Application Layer</strong>",id:"21-application-layer",level:3},{value:"<strong>2.2 Runtime Environment (RTE)</strong>",id:"22-runtime-environment-rte",level:3},{value:"<strong>2.3 Basic Software (BSW)</strong>",id:"23-basic-software-bsw",level:3},{value:"<strong>2.4 Controller</strong>",id:"24-controller",level:3},{value:"<strong>3. Functional Flow Across ECUs</strong>",id:"3-functional-flow-across-ecus",level:2},{value:"<strong>3.1 Door Status Monitoring (Front ECU)</strong>",id:"31-door-status-monitoring-front-ecu",level:3},{value:"Example:",id:"example",level:4},{value:"<strong>3.2 Lighting Control (Roof ECU)</strong>",id:"32-lighting-control-roof-ecu",level:3},{value:"Example:",id:"example-1",level:4},{value:"<strong>4. Key Features of Distributed Architecture</strong>",id:"4-key-features-of-distributed-architecture",level:2},{value:"<strong>4.1 Modularity</strong>",id:"41-modularity",level:3},{value:"<strong>4.2 Scalability</strong>",id:"42-scalability",level:3},{value:"<strong>4.3 Fault Tolerance</strong>",id:"43-fault-tolerance",level:3},{value:"<strong>5. Configuration and Integration</strong>",id:"5-configuration-and-integration",level:2},{value:"<strong>5.1 RTE Configuration</strong>",id:"51-rte-configuration",level:3},{value:"Example ARXML Snippet:",id:"example-arxml-snippet",level:4},{value:"<strong>5.2 Communication Bus Configuration</strong>",id:"52-communication-bus-configuration",level:3},{value:"<strong>6. Challenges and Solutions</strong>",id:"6-challenges-and-solutions",level:2},{value:"<strong>6.1 Synchronization Across ECUs</strong>",id:"61-synchronization-across-ecus",level:3},{value:"<strong>6.2 Fault Handling</strong>",id:"62-fault-handling",level:3},{value:"<strong>7. Summary</strong>",id:"7-summary",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"distribution-of-components",children:"Distribution of Components"})}),"\n",(0,t.jsxs)(e.p,{children:["This document details the ",(0,t.jsx)(e.strong,{children:"distributed software architecture"})," in an AUTOSAR-based lighting control system, as shown in the diagram. The components are distributed across multiple ECUs (Electronic Control Units), with communication managed by the ",(0,t.jsx)(e.strong,{children:"Runtime Environment (RTE)"})," and the underlying ",(0,t.jsx)(e.strong,{children:"Basic Software (BSW)"}),"."]}),"\n",(0,t.jsx)(e.p,{children:"The distribution of components is optimized for scalability, modularity, and efficient communication within a multi-ECU system."}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"1-overview-of-ecu-distribution",children:(0,t.jsx)(e.strong,{children:"1. Overview of ECU Distribution"})}),"\n",(0,t.jsx)(e.h3,{id:"11-roof-ecu",children:(0,t.jsx)(e.strong,{children:"1.1 Roof ECU"})}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.strong,{children:"Roof ECU"})," hosts the following software components:"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.strong,{children:"Switch"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.strong,{children:"Dimmer"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.strong,{children:"Light"})}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:["This ECU primarily handles the ",(0,t.jsx)(e.strong,{children:"lighting functionality"})," by:"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Receiving input from the ",(0,t.jsx)(e.strong,{children:"Switch"})," component."]}),"\n",(0,t.jsxs)(e.li,{children:["Controlling the brightness via the ",(0,t.jsx)(e.strong,{children:"Dimmer"}),"."]}),"\n",(0,t.jsx)(e.li,{children:"Directly managing the hardware for the lights."}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h3,{id:"12-front-ecu",children:(0,t.jsx)(e.strong,{children:"1.2 Front ECU"})}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.strong,{children:"Front ECU"})," is responsible for:"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.strong,{children:"Door Contact"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.strong,{children:"Left Door"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.strong,{children:"Right Door"})}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:["This ECU focuses on monitoring ",(0,t.jsx)(e.strong,{children:"door status"})," and communicating the results to the ",(0,t.jsx)(e.strong,{children:"Roof ECU"})," for lighting adjustments."]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h3,{id:"13-communication-bus",children:(0,t.jsx)(e.strong,{children:"1.3 Communication Bus"})}),"\n",(0,t.jsxs)(e.p,{children:["The two ECUs communicate over a ",(0,t.jsx)(e.strong,{children:"vehicle communication bus"})," (e.g., CAN, LIN, or FlexRay), ensuring real-time data transfer between the components distributed across the ECUs."]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"2-architectural-layers",children:(0,t.jsx)(e.strong,{children:"2. Architectural Layers"})}),"\n",(0,t.jsx)(e.h3,{id:"21-application-layer",children:(0,t.jsx)(e.strong,{children:"2.1 Application Layer"})}),"\n",(0,t.jsxs)(e.p,{children:["The software components (SWCs) are part of the ",(0,t.jsx)(e.strong,{children:"Application Layer"}),", where each SWC implements a specific functionality (e.g., door monitoring, dimming)."]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h3,{id:"22-runtime-environment-rte",children:(0,t.jsx)(e.strong,{children:"2.2 Runtime Environment (RTE)"})}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.strong,{children:"RTE"})," provides an abstraction layer between the Application Layer and the underlying Basic Software (BSW). It handles:"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Communication between SWCs, even if they are located on different ECUs."}),"\n",(0,t.jsxs)(e.li,{children:["Data routing via the ",(0,t.jsx)(e.strong,{children:"Virtual Function Bus (VFB)"}),"."]}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h3,{id:"23-basic-software-bsw",children:(0,t.jsx)(e.strong,{children:"2.3 Basic Software (BSW)"})}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.strong,{children:"BSW"})," is responsible for low-level hardware abstraction, providing the Application Layer with a uniform API to interact with the ECU hardware."]}),"\n",(0,t.jsx)(e.p,{children:"Key features include:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Drivers for the microcontroller and peripherals."}),"\n",(0,t.jsx)(e.li,{children:"Communication stacks for handling the bus protocols."}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h3,{id:"24-controller",children:(0,t.jsx)(e.strong,{children:"2.4 Controller"})}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.strong,{children:"Controller"})," refers to the hardware-level microcontroller in each ECU. It executes all software operations and provides the physical interfaces to sensors, actuators, and the communication bus."]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"3-functional-flow-across-ecus",children:(0,t.jsx)(e.strong,{children:"3. Functional Flow Across ECUs"})}),"\n",(0,t.jsx)(e.h3,{id:"31-door-status-monitoring-front-ecu",children:(0,t.jsx)(e.strong,{children:"3.1 Door Status Monitoring (Front ECU)"})}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:["The ",(0,t.jsx)(e.strong,{children:"Left Door"})," and ",(0,t.jsx)(e.strong,{children:"Right Door"})," SWCs monitor the door states (",(0,t.jsx)(e.code,{children:"OPEN"})," or ",(0,t.jsx)(e.code,{children:"CLOSED"}),")."]}),"\n",(0,t.jsxs)(e.li,{children:["The ",(0,t.jsx)(e.strong,{children:"Door Contact"})," component aggregates the status of both doors and determines if lighting adjustments are required."]}),"\n",(0,t.jsxs)(e.li,{children:["This information is sent to the ",(0,t.jsx)(e.strong,{children:"Roof ECU"})," over the communication bus."]}),"\n"]}),"\n",(0,t.jsx)(e.h4,{id:"example",children:"Example:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c",children:'// Door Contact SWC: Sending aggregated status\nvoid DoorContact_SendStatus(bool leftDoor, bool rightDoor) {\n    bool doorOpen = leftDoor || rightDoor;\n    VFB_Send("DoorStatus", doorOpen);\n}\n'})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h3,{id:"32-lighting-control-roof-ecu",children:(0,t.jsx)(e.strong,{children:"3.2 Lighting Control (Roof ECU)"})}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:["The ",(0,t.jsx)(e.strong,{children:"Roof ECU"})," receives the door status from the ",(0,t.jsx)(e.strong,{children:"Front ECU"})," via the communication bus."]}),"\n",(0,t.jsxs)(e.li,{children:["The ",(0,t.jsx)(e.strong,{children:"Dimmer"})," component adjusts the brightness based on door status or manual input from the ",(0,t.jsx)(e.strong,{children:"Switch"}),"."]}),"\n",(0,t.jsxs)(e.li,{children:["The ",(0,t.jsx)(e.strong,{children:"Light"})," component applies the brightness to the physical lights."]}),"\n"]}),"\n",(0,t.jsx)(e.h4,{id:"example-1",children:"Example:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c",children:'// Dimmer SWC: Adjusting brightness based on inputs\nvoid Dimmer_AdjustBrightness(bool doorOpen, int switchInput) {\n    int brightness = switchInput > 0 ? switchInput : (doorOpen ? 100 : 0);\n    VFB_Send("LightBrightness", brightness);\n}\n'})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"4-key-features-of-distributed-architecture",children:(0,t.jsx)(e.strong,{children:"4. Key Features of Distributed Architecture"})}),"\n",(0,t.jsx)(e.h3,{id:"41-modularity",children:(0,t.jsx)(e.strong,{children:"4.1 Modularity"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Functional separation of SWCs into different ECUs allows independent development and testing."}),"\n",(0,t.jsxs)(e.li,{children:["Components like ",(0,t.jsx)(e.strong,{children:"Door Contact"})," and ",(0,t.jsx)(e.strong,{children:"Dimmer"})," can be reused across vehicle models with minimal modification."]}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h3,{id:"42-scalability",children:(0,t.jsx)(e.strong,{children:"4.2 Scalability"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"New features (e.g., ambient lighting or additional sensors) can be added to the system by extending the software components or adding new ECUs."}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h3,{id:"43-fault-tolerance",children:(0,t.jsx)(e.strong,{children:"4.3 Fault Tolerance"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["The distributed design ensures partial functionality in case of a single ECU failure. For example:","\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["If the ",(0,t.jsx)(e.strong,{children:"Roof ECU"})," fails, door monitoring by the ",(0,t.jsx)(e.strong,{children:"Front ECU"})," remains operational."]}),"\n",(0,t.jsxs)(e.li,{children:["If the ",(0,t.jsx)(e.strong,{children:"Front ECU"})," fails, manual lighting control via the ",(0,t.jsx)(e.strong,{children:"Switch"})," on the ",(0,t.jsx)(e.strong,{children:"Roof ECU"})," remains functional."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"5-configuration-and-integration",children:(0,t.jsx)(e.strong,{children:"5. Configuration and Integration"})}),"\n",(0,t.jsx)(e.h3,{id:"51-rte-configuration",children:(0,t.jsx)(e.strong,{children:"5.1 RTE Configuration"})}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.strong,{children:"RTE"})," must be configured to define:"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"The communication paths between SWCs on different ECUs."}),"\n",(0,t.jsx)(e.li,{children:"The timing and scheduling of messages over the communication bus."}),"\n"]}),"\n",(0,t.jsx)(e.h4,{id:"example-arxml-snippet",children:"Example ARXML Snippet:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-xml",children:"<Sender-Receiver-Interface>\n    <ShortName>DoorStatus</ShortName>\n    <DataElement>\n        <ShortName>DoorOpen</ShortName>\n        <Type>Boolean</Type>\n    </DataElement>\n</Sender-Receiver-Interface>\n"})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h3,{id:"52-communication-bus-configuration",children:(0,t.jsx)(e.strong,{children:"5.2 Communication Bus Configuration"})}),"\n",(0,t.jsx)(e.p,{children:"The bus protocol (e.g., CAN) must be configured for:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Message IDs and priorities."}),"\n",(0,t.jsx)(e.li,{children:"Timing and synchronization requirements."}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"6-challenges-and-solutions",children:(0,t.jsx)(e.strong,{children:"6. Challenges and Solutions"})}),"\n",(0,t.jsx)(e.h3,{id:"61-synchronization-across-ecus",children:(0,t.jsx)(e.strong,{children:"6.1 Synchronization Across ECUs"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Challenge:"})," Ensuring real-time updates between the ",(0,t.jsx)(e.strong,{children:"Front ECU"})," and ",(0,t.jsx)(e.strong,{children:"Roof ECU"}),"."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Solution:"})," Use deterministic protocols like FlexRay or configure CAN messages with high priority for critical signals (e.g., door status)."]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"62-fault-handling",children:(0,t.jsx)(e.strong,{children:"6.2 Fault Handling"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Challenge:"})," Handling communication failures between ECUs."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Solution:"})," Implement fallback modes (e.g., default lighting behavior if door status is unavailable)."]}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"7-summary",children:(0,t.jsx)(e.strong,{children:"7. Summary"})}),"\n",(0,t.jsxs)(e.p,{children:["The distribution of components across the ",(0,t.jsx)(e.strong,{children:"Roof ECU"})," and ",(0,t.jsx)(e.strong,{children:"Front ECU"})," in this AUTOSAR-based system highlights the following:"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Efficient Communication:"})," The RTE and VFB manage seamless data flow across ECUs."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Hardware Abstraction:"})," The BSW and RTE abstract hardware details, enabling scalable and reusable designs."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Robust Functionality:"})," Fault-tolerant design ensures reliable system operation even with partial failures."]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"This architecture exemplifies the principles of AUTOSAR, promoting modularity, scalability, and maintainability in embedded system design."})]})}function h(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},28453:(n,e,i)=>{i.d(e,{R:()=>o,x:()=>l});var s=i(96540);const t={},r=s.createContext(t);function o(n){const e=s.useContext(r);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:o(n.components),s.createElement(r.Provider,{value:e},n.children)}}}]);