"use strict";(self.webpackChunkvns=self.webpackChunkvns||[]).push([[20142],{40997:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"AUTOSAR/application/types_swc","title":"Types of Software Components","description":"AUTOSAR defines a modular and scalable approach for developing embedded systems. One of its key principles is the organization of functionalities into software components (SWCs). This document provides an in-depth explanation of the types of software components in AUTOSAR, their roles, and their interactions, as illustrated in the image.","source":"@site/docs/AUTOSAR/02_application/05_types_swc.md","sourceDirName":"AUTOSAR/02_application","slug":"/AUTOSAR/application/types_swc","permalink":"/Vehicle-Network-Standards/docs/AUTOSAR/application/types_swc","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/AUTOSAR/02_application/05_types_swc.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{},"sidebar":"autosarSidebar","previous":{"title":"Distribution of Components","permalink":"/Vehicle-Network-Standards/docs/AUTOSAR/application/distribution_components"},"next":{"title":"Types of Ports","permalink":"/Vehicle-Network-Standards/docs/AUTOSAR/application/types_ports"}}');var t=s(74848),i=s(28453);const r={},l="Types of Software Components",a={},c=[{value:"<strong>1. Atomic Components</strong>",id:"1-atomic-components",level:2},{value:"<strong>1.1 Application Components</strong>",id:"11-application-components",level:3},{value:"Example Workflow:",id:"example-workflow",level:4},{value:"Code Snippet:",id:"code-snippet",level:4},{value:"<strong>1.2 Sensor/Actuator Components</strong>",id:"12-sensoractuator-components",level:3},{value:"Workflow:",id:"workflow",level:4},{value:"Example Code Snippet:",id:"example-code-snippet",level:4},{value:"Key Constraints:",id:"key-constraints",level:4},{value:"<strong>2. Composition Components</strong>",id:"2-composition-components",level:2},{value:"<strong>Features of Composition Components</strong>",id:"features-of-composition-components",level:3},{value:"Example from the Image:",id:"example-from-the-image",level:4},{value:"<strong>3. Communication Between Components</strong>",id:"3-communication-between-components",level:3},{value:"<strong>AUTOSAR Signal</strong>",id:"autosar-signal",level:4},{value:"<strong>ECU Signal</strong>",id:"ecu-signal",level:4},{value:"<strong>4. Example: Light Control System</strong>",id:"4-example-light-control-system",level:2},{value:"<strong>4.1 Workflow</strong>",id:"41-workflow",level:3},{value:"Code Example:",id:"code-example",level:4},{value:"<strong>5. Advantages of AUTOSAR Component Types</strong>",id:"5-advantages-of-autosar-component-types",level:2},{value:"<strong>Atomic Components</strong>",id:"atomic-components",level:3},{value:"<strong>Composition Components</strong>",id:"composition-components",level:3},{value:"<strong>Sensor/Actuator Components</strong>",id:"sensoractuator-components",level:3},{value:"<strong>6. Conclusion</strong>",id:"6-conclusion",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"types-of-software-components",children:"Types of Software Components"})}),"\n",(0,t.jsxs)(n.p,{children:["AUTOSAR defines a modular and scalable approach for developing embedded systems. One of its key principles is the organization of functionalities into ",(0,t.jsx)(n.strong,{children:"software components (SWCs)"}),". This document provides an in-depth explanation of the types of software components in AUTOSAR, their roles, and their interactions, as illustrated in the image."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"1-atomic-components",children:(0,t.jsx)(n.strong,{children:"1. Atomic Components"})}),"\n",(0,t.jsx)(n.p,{children:"Atomic components are the smallest functional units in the AUTOSAR architecture. These components cannot be subdivided further and are directly mapped to an ECU during system design."}),"\n",(0,t.jsx)(n.h3,{id:"11-application-components",children:(0,t.jsx)(n.strong,{children:"1.1 Application Components"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"These components implement specific algorithms or functionalities for the application."}),"\n",(0,t.jsx)(n.li,{children:"They communicate with other components through well-defined interfaces."}),"\n",(0,t.jsx)(n.li,{children:"Typically, application components rely on input/output data to perform their functions."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example-workflow",children:"Example Workflow:"}),"\n",(0,t.jsxs)(n.p,{children:["An application component may receive a temperature value from a ",(0,t.jsx)(n.strong,{children:"Sensor SWC"})," and process it to control an actuator."]}),"\n",(0,t.jsx)(n.h4,{id:"code-snippet",children:"Code Snippet:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:"// Application SWC: Process temperature data\nvoid ProcessTemperature(float temperature) {\n    if (temperature > 50.0) {\n        ActivateCoolingSystem();\n    }\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"12-sensoractuator-components",children:(0,t.jsx)(n.strong,{children:"1.2 Sensor/Actuator Components"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Sensor Components:"})," Handle the preparation and transmission of input data (e.g., sensor readings) to the application layer."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Actuator Components:"})," Control physical devices (e.g., motors, lights) based on commands from the application layer."]}),"\n",(0,t.jsxs)(n.li,{children:["These components are tightly coupled to the ECU hardware and interact with hardware abstraction layers like ",(0,t.jsx)(n.strong,{children:"IoHwAb (I/O Hardware Abstraction)"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"workflow",children:"Workflow:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["A ",(0,t.jsx)(n.strong,{children:"Sensor SWC"})," reads raw signals from a sensor via the ",(0,t.jsx)(n.strong,{children:"IoHwAb"})," layer."]}),"\n",(0,t.jsxs)(n.li,{children:["The data is converted to a standardized format and sent to the Application SWC as an ",(0,t.jsx)(n.strong,{children:"AUTOSAR Signal"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example-code-snippet",children:"Example Code Snippet:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:'// Sensor SWC: Send temperature data\nfloat ReadTemperatureSensor() {\n    float rawVoltage = IoHwAb_ReadSensor();\n    return ConvertVoltageToTemperature(rawVoltage);\n}\n\nvoid SendTemperature() {\n    float temperature = ReadTemperatureSensor();\n    VFB_Send("TemperatureSignal", temperature);\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h4,{id:"key-constraints",children:"Key Constraints:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Sensor/Actuator components are tightly bound to the ECU, which must be considered during the mapping process."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"2-composition-components",children:(0,t.jsx)(n.strong,{children:"2. Composition Components"})}),"\n",(0,t.jsx)(n.p,{children:"Composition components encapsulate multiple atomic components or other composition components. These provide a logical grouping of SWCs to simplify the system design and improve reusability."}),"\n",(0,t.jsx)(n.h3,{id:"features-of-composition-components",children:(0,t.jsx)(n.strong,{children:"Features of Composition Components"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"They act as a container for SWCs, grouping related functionalities into a single unit."}),"\n",(0,t.jsx)(n.li,{children:"Encapsulation helps in modular design and simplifies integration."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example-from-the-image",children:"Example from the Image:"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.strong,{children:"Light Control Composition Component"})," consists of:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Switch Sensor Component"}),": Handles input from the user (e.g., switch state)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Dimmer Application Component"}),": Adjusts brightness based on inputs."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Light Actuator Component"}),": Controls the hardware for light intensity."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"3-communication-between-components",children:(0,t.jsx)(n.strong,{children:"3. Communication Between Components"})}),"\n",(0,t.jsx)(n.h4,{id:"autosar-signal",children:(0,t.jsx)(n.strong,{children:"AUTOSAR Signal"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Data exchange between components is represented as ",(0,t.jsx)(n.strong,{children:"AUTOSAR Signals"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Example: The ",(0,t.jsx)(n.strong,{children:"Sensor SWC"})," sends a ",(0,t.jsx)(n.code,{children:"Send_Temperature"})," signal to the ",(0,t.jsx)(n.strong,{children:"Application SWC"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"ecu-signal",children:(0,t.jsx)(n.strong,{children:"ECU Signal"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Represents the raw data exchanged between the ",(0,t.jsx)(n.strong,{children:"Sensor/Actuator SWCs"})," and the ECU hardware via the ",(0,t.jsx)(n.strong,{children:"IoHwAb"})," layer."]}),"\n",(0,t.jsxs)(n.li,{children:["Example: A sensor reading represented as voltage (",(0,t.jsx)(n.code,{children:"V"}),") is converted into a physical value like resistance (",(0,t.jsx)(n.code,{children:"\u2126"}),") or temperature (",(0,t.jsx)(n.code,{children:"T"}),")."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"4-example-light-control-system",children:(0,t.jsx)(n.strong,{children:"4. Example: Light Control System"})}),"\n",(0,t.jsx)(n.h3,{id:"41-workflow",children:(0,t.jsx)(n.strong,{children:"4.1 Workflow"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Switch Sensor Component"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Reads the switch state (on/off) and sends the signal to the ",(0,t.jsx)(n.strong,{children:"Dimmer Application Component"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Dimmer Application Component"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Determines the brightness level based on the switch state or other inputs (e.g., ambient light)."}),"\n",(0,t.jsxs)(n.li,{children:["Sends the brightness value to the ",(0,t.jsx)(n.strong,{children:"Light Actuator Component"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Light Actuator Component"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Converts the brightness value into a hardware signal (e.g., PWM) to control the light intensity."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"code-example",children:"Code Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:'// Switch Sensor Component: Read switch state\nbool ReadSwitch() {\n    return IoHwAb_ReadSwitch();\n}\n\n// Dimmer Application Component: Adjust brightness\nvoid AdjustBrightness(bool switchState) {\n    int brightness = switchState ? 100 : 0;\n    VFB_Send("BrightnessSignal", brightness);\n}\n\n// Light Actuator Component: Apply brightness\nvoid ApplyBrightness(int brightness) {\n    IoHwAb_SetPWM(brightness);\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"5-advantages-of-autosar-component-types",children:(0,t.jsx)(n.strong,{children:"5. Advantages of AUTOSAR Component Types"})}),"\n",(0,t.jsx)(n.h3,{id:"atomic-components",children:(0,t.jsx)(n.strong,{children:"Atomic Components"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Scalability:"})," Can be easily reused across projects."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Testability:"})," Independent and isolated, simplifying unit testing."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"composition-components",children:(0,t.jsx)(n.strong,{children:"Composition Components"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Modularity:"})," Logical grouping simplifies design and integration."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Encapsulation:"})," Hides complexity, reducing the overall system complexity."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"sensoractuator-components",children:(0,t.jsx)(n.strong,{children:"Sensor/Actuator Components"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Hardware Abstraction:"})," Decouples hardware dependencies from application logic."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Real-Time Efficiency:"})," Directly communicates with ECU hardware for low-latency operations."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"6-conclusion",children:(0,t.jsx)(n.strong,{children:"6. Conclusion"})}),"\n",(0,t.jsxs)(n.p,{children:["The classification of AUTOSAR software components into ",(0,t.jsx)(n.strong,{children:"atomic"})," and ",(0,t.jsx)(n.strong,{children:"composition"})," components, along with the specialized ",(0,t.jsx)(n.strong,{children:"sensor/actuator components"}),", ensures a modular, reusable, and scalable architecture. By abstracting hardware dependencies and standardizing communication, AUTOSAR simplifies the development of complex embedded systems."]}),"\n",(0,t.jsx)(n.p,{children:"This structured approach promotes efficiency, fault tolerance, and maintainability, making it a cornerstone of modern automotive software design."})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>l});var o=s(96540);const t={},i=o.createContext(t);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);