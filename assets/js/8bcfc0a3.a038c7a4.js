"use strict";(self.webpackChunkvns=self.webpackChunkvns||[]).push([[55231],{23044:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>l,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"SOVA/core-concepts-soa/muster_soa","title":"Allgemeines architektonisches Muster f\xfcr serviceorientierte  Kommunikation","description":"Das generelle Architekturpattern f\xfcr service-orientierte Kommunikation, insbesondere im Kontext des","source":"@site/docs/SOVA/03_core-concepts-soa/07_muster_soa.md","sourceDirName":"SOVA/03_core-concepts-soa","slug":"/SOVA/core-concepts-soa/muster_soa","permalink":"/Vehicle-Network-Standards/docs/SOVA/core-concepts-soa/muster_soa","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/SOVA/03_core-concepts-soa/07_muster_soa.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{},"sidebar":"sovaSidebar","previous":{"title":"SOME/IP","permalink":"/Vehicle-Network-Standards/docs/SOVA/core-concepts-soa/someip"},"next":{"title":"Ziele der serviceorientierten Architektur","permalink":"/Vehicle-Network-Standards/docs/SOVA/core-concepts-soa/ziel_soa"}}');var i=r(74848),s=r(28453);const o={},a="Allgemeines architektonisches Muster f\xfcr serviceorientierte  Kommunikation",d={},c=[];function u(e){const n={h1:"h1",header:"header",p:"p",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"allgemeines-architektonisches-muster-f\xfcr-serviceorientierte--kommunikation",children:"Allgemeines architektonisches Muster f\xfcr serviceorientierte  Kommunikation"})}),"\n",(0,i.jsx)(n.p,{children:'Das generelle Architekturpattern f\xfcr service-orientierte Kommunikation, insbesondere im Kontext des\nDatenaustauschs zwischen einem Service Provider (Server) und den Clients, basiert auf dem Prinzip des\nMethodenaufrufs und der asynchronen Kommunikation. Im Folgenden wird erl\xe4utert, wie ein solcher\nMethodenaufruf f\xfcr die Anfrage einer Fahrzeugresource abl\xe4uft:\n1.\n2.\nInitiierung des Methodenaufrufs: Der Prozess beginnt damit, dass ein Client, der auf eine bestimmte\nRessource im Fahrzeug zugreifen m\xf6chte, die Initiatorrolle einnimmt. Der Client sendet eine Method Call\nProtocol Data Unit (PDU) an den Server, der hier als Service Provider fungiert. Diese Method Call PDU enth\xe4lt\nIN-Parameter oder Argumente, die vom Server ben\xf6tigt werden, um die gew\xfcnschte Anfrage f\xfcr den Zugriff\nauf die Ressource auszuf\xfchren. Ein Beispiel hierf\xfcr k\xf6nnte die Methode "requestWindowPosition" sein, die\nspezifische Argumente erfordert, um die gew\xfcnschte Position des Fensters zu signalisieren. Diese\nArgumente werden als IN-Parameter in der Method Call PDU festgelegt.'}),"\n",(0,i.jsx)(n.p,{children:"Antwort des Servers: Nachdem der Server die Methodenaufrufanfrage erhalten hat, f\xfchrt er die angeforderte\nAktion aus oder plant deren Ausf\xfchrung. Anschlie\xdfend sendet der Server eine Return Protocol Data Unit\n(PDU) an den anfragenden Client zur\xfcck. Diese Return-PDU enth\xe4lt in der Regel Informationen, die das\nErgebnis des Methodenaufrufs beschreiben und dem Client mitteilen, ob die angeforderte Aktion erfolgreich\nausgef\xfchrt wurde."}),"\n",(0,i.jsx)(n.p,{children:"Eine wichtige Neuerung im Rahmen der Service-orientierten Architektur (SOA) besteht darin, dass, wenn eine\n\xc4nderung des Zustands einer Ressource von einem beliebigen Client angefordert wird, der Server zus\xe4tzlich zur\neinfachen Return-PDU ein sogenanntes State Event an alle Clients sendet, die sich auf den entsprechenden Service\n(Dienst) subscribed haben. Dieses State Event enth\xe4lt Informationen \xfcber den neuen Zustand der Ressource, der\nsich aufgrund der durchgef\xfchrten Aktion ge\xe4ndert hat. Diese Mitteilung des neuen Ressourcenstatus an alle\nrelevanten Clients erm\xf6glicht eine koordinierte und konsistente Aktualisierung der Informationen \xfcber die\nRessource in der gesamten Client-Community."}),"\n",(0,i.jsx)(n.p,{children:"Es ist wichtig anzumerken, dass die zugrundeliegende Kommunikationsprotokolltechnologie f\xfcr OVAPI (Open\nVehicle Application Programming Interface) das SOME/IP-Protokoll ist, das auf dem Ethernet-Stack basiert. Diese\nTechnologie erm\xf6glicht die effiziente und zuverl\xe4ssige Kommunikation zwischen dem Service Provider (Server) und\nden Clients im Kontext der Fahrzeugdaten- und Ressourcennutzung."})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var t=r(96540);const i={},s=t.createContext(i);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);