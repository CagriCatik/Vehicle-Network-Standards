"use strict";(self.webpackChunkvns=self.webpackChunkvns||[]).push([[15169],{2749:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>l,contentTitle:()=>h,default:()=>a,frontMatter:()=>d,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"CAN/buszugriff/prinzip","title":"Buszugriffs im CAN-Netzwerk","description":"Der CAN-Bus (Controller Area Network) ist ein robustes Fahrzeugnetzwerk, das es Mikrocontrollern und Ger\xe4ten erm\xf6glicht, miteinander zu kommunizieren, ohne einen Host-Computer. Der Standard ISO 11898-1 definiert die Spezifikationen f\xfcr die Kommunikation im CAN-Bus. In diesem Abschnitt werden die Mechanismen des Buszugriffs im CAN-Netzwerk detailliert beschrieben und erkl\xe4rt, wie Kollisionen vermieden werden.","source":"@site/docs/CAN/04_buszugriff/01_prinzip.md","sourceDirName":"CAN/04_buszugriff","slug":"/CAN/buszugriff/prinzip","permalink":"/Vehicle-Network-Standards/docs/CAN/buszugriff/prinzip","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/CAN/04_buszugriff/01_prinzip.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"canSidebar","previous":{"title":"Buszugriff","permalink":"/Vehicle-Network-Standards/docs/category/buszugriff"},"next":{"title":"Bitweise Arbitrierung","permalink":"/Vehicle-Network-Standards/docs/CAN/buszugriff/arbitrierung"}}');var s=n(74848),t=n(28453);const d={},h="Buszugriffs im CAN-Netzwerk",l={},c=[{value:"Grundlagen des CAN-Buszugriffs",id:"grundlagen-des-can-buszugriffs",level:2},{value:"Kollisionsvermeidung",id:"kollisionsvermeidung",level:2},{value:"Bitweise Busarbitrierung",id:"bitweise-busarbitrierung",level:2},{value:"Ereignis 1",id:"ereignis-1",level:2},{value:"Ereignis 2",id:"ereignis-2",level:2},{value:"Ereignis 3",id:"ereignis-3",level:2},{value:"Ereignis 4",id:"ereignis-4",level:2},{value:"Technische Erl\xe4uterungen",id:"technische-erl\xe4uterungen",level:2}];function u(e){const i={h1:"h1",h2:"h2",header:"header",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"buszugriffs-im-can-netzwerk",children:"Buszugriffs im CAN-Netzwerk"})}),"\n",(0,s.jsx)(i.p,{children:"Der CAN-Bus (Controller Area Network) ist ein robustes Fahrzeugnetzwerk, das es Mikrocontrollern und Ger\xe4ten erm\xf6glicht, miteinander zu kommunizieren, ohne einen Host-Computer. Der Standard ISO 11898-1 definiert die Spezifikationen f\xfcr die Kommunikation im CAN-Bus. In diesem Abschnitt werden die Mechanismen des Buszugriffs im CAN-Netzwerk detailliert beschrieben und erkl\xe4rt, wie Kollisionen vermieden werden."}),"\n",(0,s.jsx)(i.h2,{id:"grundlagen-des-can-buszugriffs",children:"Grundlagen des CAN-Buszugriffs"}),"\n",(0,s.jsx)(i.p,{children:"Im CAN-Netzwerk haben alle Knoten gleichberechtigten Zugang zum Bus, was bedeutet, dass jeder Knoten jederzeit das Recht hat, eine Nachricht zu senden. Diese Architektur wird als Multi-Master-Architektur bezeichnet. Sie gew\xe4hrleistet eine hohe Verf\xfcgbarkeit und erlaubt eine ereignisgesteuerte Daten\xfcbertragung. Jedoch birgt sie auch die Gefahr von Kollisionen, wenn mehrere Knoten gleichzeitig den Bus verwenden m\xf6chten."}),"\n",(0,s.jsx)(i.h2,{id:"kollisionsvermeidung",children:"Kollisionsvermeidung"}),"\n",(0,s.jsx)(i.p,{children:"Um Kollisionen zu vermeiden und die Echtzeitf\xe4higkeit des Systems zu gew\xe4hrleisten, verwendet der CAN-Bus das CSMA/CA-Verfahren (Carrier Sense Multiple Access with Collision Avoidance). Dieses Verfahren stellt sicher, dass Knoten nur dann auf den Bus zugreifen, wenn dieser frei ist."}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Carrier Sense"}),": Jeder Knoten \xfcberwacht kontinuierlich den Zustand des Busses. Bevor ein Knoten eine Nachricht sendet, pr\xfcft er, ob der Bus frei ist."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Multiple Access"}),": Mehrere Knoten k\xf6nnen auf den Bus zugreifen, jedoch nicht gleichzeitig."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Collision Avoidance"}),": Wenn der Bus belegt ist, warten die Knoten, bis der Bus frei wird, bevor sie ihre Nachrichten senden. Dadurch werden Kollisionen vermieden."]}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"bitweise-busarbitrierung",children:"Bitweise Busarbitrierung"}),"\n",(0,s.jsx)(i.p,{children:"Das Verfahren der bitweisen Busarbitrierung ist ein zentraler Bestandteil des CSMA/CA und sorgt daf\xfcr, dass immer die Nachricht mit der h\xf6chsten Priorit\xe4t gesendet wird."}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Priorit\xe4t der Nachrichten"}),": Jede Nachricht im CAN-Bus hat eine eindeutige Priorit\xe4t, die durch ihre Identifier (ID) bestimmt wird. Nachrichten mit niedrigeren ID-Werten haben h\xf6here Priorit\xe4ten."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Arbitrierungsprozess"}),": Wenn mehrere Knoten gleichzeitig den Bus nutzen wollen, wird die Nachricht mit der h\xf6chsten Priorit\xe4t (niedrigste ID) bevorzugt. Die anderen Knoten ziehen sich zur\xfcck und versuchen es erneut, sobald der Bus frei ist."]}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"ereignis-1",children:"Ereignis 1"}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.img,{alt:"CAN-Netzwerk",src:n(4028).A+"",width:"1551",height:"585"})}),"\n",(0,s.jsx)(i.h2,{id:"ereignis-2",children:"Ereignis 2"}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.img,{alt:"CAN-Netzwerk",src:n(51244).A+"",width:"1554",height:"583"})}),"\n",(0,s.jsx)(i.h2,{id:"ereignis-3",children:"Ereignis 3"}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.img,{alt:"CAN-Netzwerk",src:n(63697).A+"",width:"1550",height:"581"})}),"\n",(0,s.jsx)(i.h2,{id:"ereignis-4",children:"Ereignis 4"}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.img,{alt:"CAN-Netzwerk",src:n(72016).A+"",width:"1529",height:"562"})}),"\n",(0,s.jsx)(i.h2,{id:"technische-erl\xe4uterungen",children:"Technische Erl\xe4uterungen"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Carrier Sense"}),": Dieser Mechanismus \xfcberwacht kontinuierlich den Zustand des Busses. Er stellt sicher, dass ein Knoten nur dann sendet, wenn der Bus tats\xe4chlich frei ist. Dies ist ein wichtiger Aspekt des CSMA/CA-Verfahrens."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Intermission (ITM)"}),": Die ITM-Periode ist eine kurze Pause zwischen den Nachrichten, die notwendig ist, um den Busstatus zu stabilisieren und eine klare Trennung zwischen den Nachrichten zu gew\xe4hrleisten. Sie verhindert auch Kollisionen bei aufeinanderfolgenden Nachrichten."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Buszugriffsprotokoll"}),": Das Protokoll f\xfcr den Buszugriff stellt sicher, dass der CAN-Bus effizient genutzt wird und dass Nachrichten in der Reihenfolge ihrer Priorit\xe4t gesendet werden. Dies ist entscheidend f\xfcr die Echtzeitf\xe4higkeit des Systems."]}),"\n"]}),"\n",(0,s.jsx)(i.h1,{id:"beispiel-f\xfcr-busarbitrierung",children:"Beispiel f\xfcr Busarbitrierung"}),"\n",(0,s.jsx)(i.p,{children:"Ein praktisches Beispiel f\xfcr die bitweise Busarbitrierung:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Knoten A hat eine Nachricht mit der ID 0x100 (h\xf6here Priorit\xe4t)."}),"\n",(0,s.jsx)(i.li,{children:"Knoten B hat eine Nachricht mit der ID 0x200 (niedrigere Priorit\xe4t)."}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"Wenn beide Knoten gleichzeitig senden m\xf6chten:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Beide Knoten senden die Bits ihrer IDs gleichzeitig auf den Bus."}),"\n",(0,s.jsx)(i.li,{children:"Der Buszustand wird von allen Knoten \xfcberwacht."}),"\n",(0,s.jsx)(i.li,{children:"Sobald Knoten B ein Bit sendet, das mit einem h\xf6heren Bit von Knoten A kollidiert, erkennt Knoten B die h\xf6here Priorit\xe4t und zieht sich zur\xfcck."}),"\n",(0,s.jsx)(i.li,{children:"Knoten A setzt die \xdcbertragung fort, da seine Nachricht die h\xf6here Priorit\xe4t hat."}),"\n"]})]})}function a(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},4028:(e,i,n)=>{n.d(i,{A:()=>r});const r=n.p+"assets/images/1712022411179-2b94c066701b425ec6eacca995f5b19b.png"},51244:(e,i,n)=>{n.d(i,{A:()=>r});const r=n.p+"assets/images/1712022493865-e4217ce8885ed0559c0bf51850b1130d.png"},63697:(e,i,n)=>{n.d(i,{A:()=>r});const r=n.p+"assets/images/1712022523730-976ce7c9a6d00311bcd81b32d2dcbbec.png"},72016:(e,i,n)=>{n.d(i,{A:()=>r});const r=n.p+"assets/images/1712022543957-d0680be6715604504cc8ce65ce17339e.png"},28453:(e,i,n)=>{n.d(i,{R:()=>d,x:()=>h});var r=n(96540);const s={},t=r.createContext(s);function d(e){const i=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function h(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),r.createElement(t.Provider,{value:i},e.children)}}}]);