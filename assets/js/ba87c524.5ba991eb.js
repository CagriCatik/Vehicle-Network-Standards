"use strict";(self.webpackChunkvns=self.webpackChunkvns||[]).push([[22749],{60209:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>u,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"CAN/framing/bitstuffing","title":"Synchronisation und Resynchronisation","description":"F\xfcr eine korrekte und zuverl\xe4ssige Daten\xfcbertragung im CAN-Bus (Controller Area Network) ist die Synchronisation der Kommunikationspartner von entscheidender Bedeutung. Eine pr\xe4zise Synchronisation gew\xe4hrleistet, dass alle Knoten im Netzwerk die Datenbits korrekt empfangen und interpretieren k\xf6nnen.","source":"@site/docs/CAN/03_framing/06_bitstuffing.md","sourceDirName":"CAN/03_framing","slug":"/CAN/framing/bitstuffing","permalink":"/Vehicle-Network-Standards/docs/CAN/framing/bitstuffing","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/CAN/03_framing/06_bitstuffing.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{},"sidebar":"canSidebar","previous":{"title":"Fehlererkennung und -behandlung im CAN-Netzwerk","permalink":"/Vehicle-Network-Standards/docs/CAN/framing/crc-ack"},"next":{"title":"Buszugriffs im CAN-Netzwerk","permalink":"/Vehicle-Network-Standards/docs/CAN/buszugriff/prinzip"}}');var r=i(74848),s=i(28453);const a={},d="Synchronisation und Resynchronisation",u={},c=[{value:"Synchronisation der Kommunikationspartner",id:"synchronisation-der-kommunikationspartner",level:2},{value:"Resynchronisation",id:"resynchronisation",level:2},{value:"Bitstuffing und seine Bedeutung",id:"bitstuffing-und-seine-bedeutung",level:2},{value:"Kritische Betrachtung und wissenschaftliche Genauigkeit",id:"kritische-betrachtung-und-wissenschaftliche-genauigkeit",level:2}];function o(e){const n={h1:"h1",h2:"h2",header:"header",p:"p",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"synchronisation-und-resynchronisation",children:"Synchronisation und Resynchronisation"})}),"\n",(0,r.jsx)(n.p,{children:"F\xfcr eine korrekte und zuverl\xe4ssige Daten\xfcbertragung im CAN-Bus (Controller Area Network) ist die Synchronisation der Kommunikationspartner von entscheidender Bedeutung. Eine pr\xe4zise Synchronisation gew\xe4hrleistet, dass alle Knoten im Netzwerk die Datenbits korrekt empfangen und interpretieren k\xf6nnen."}),"\n",(0,r.jsx)(n.h2,{id:"synchronisation-der-kommunikationspartner",children:"Synchronisation der Kommunikationspartner"}),"\n",(0,r.jsx)(n.p,{children:'Die Synchronisation der Kommunikationspartner beginnt mit dem Startbit, auch als Start of Frame (SOF) bezeichnet. Das SOF ist ein Signalwechsel von einem rezessiven (logisch "1") zu einem dominanten (logisch "0") Pegel und markiert den Beginn einer CAN-Botschaft. Dieser Signalwechsel dient als Referenzpunkt, um den Gleichlauf zwischen Sender und Empf\xe4nger herzustellen.'}),"\n",(0,r.jsx)(n.p,{children:"Nach dem SOF \xfcbernimmt ein Resynchronisationsmechanismus die Aufgabe, den Gleichlauf w\xe4hrend der gesamten Botschafts\xfcbertragung aufrechtzuerhalten. Dies ist notwendig, um sicherzustellen, dass die Bits korrekt ausgerichtet und interpretiert werden, auch wenn geringf\xfcgige Unterschiede in den Taktraten der Knoten vorhanden sind."}),"\n",(0,r.jsx)(n.h2,{id:"resynchronisation",children:"Resynchronisation"}),"\n",(0,r.jsx)(n.p,{children:"Der Resynchronisationsmechanismus basiert auf der Auswertung der von rezessiv nach dominant wechselnden Signalflanken. Diese Signalflanken werden zur Korrektur eventueller Phasenabweichungen zwischen Sender und Empf\xe4nger verwendet."}),"\n",(0,r.jsx)(n.p,{children:'Ein wesentlicher Bestandteil dieses Mechanismus ist der Bitstuffing-Mechanismus. Laut der Norm ISO 11898-1 m\xfcssen Sender nach sp\xe4testens f\xfcnf aufeinanderfolgenden Bits gleicher Polarit\xe4t ein komplement\xe4res Bit einf\xfcgen. Dies bedeutet, dass nach f\xfcnf identischen Bits (entweder f\xfcnf "0" oder f\xfcnf "1") ein Bit der entgegengesetzten Polarit\xe4t eingef\xfcgt wird, um sicherzustellen, dass ausreichend Signalflanken zur Resynchronisation vorhanden sind.'}),"\n",(0,r.jsx)(n.h2,{id:"bitstuffing-und-seine-bedeutung",children:"Bitstuffing und seine Bedeutung"}),"\n",(0,r.jsx)(n.p,{children:"Bitstuffing beginnt mit der \xdcbertragung des SOF und endet mit dem letzten Bit der CRC-Sequenz (Cyclic Redundancy Check). F\xfcr einen Data Frame im Standard-Format mit einem maximalen Nutzdatenfeld von acht Bytes k\xf6nnen im theoretischen Worst-Case-Fall bis zu 24 Stuffbits eingef\xfcgt werden. Dies f\xfchrt dazu, dass der l\xe4ngstm\xf6gliche Data Frame im Standard-Format theoretisch aus 132 Bits besteht."}),"\n",(0,r.jsx)(n.p,{children:"Der Bitstuffing-Mechanismus sorgt daf\xfcr, dass lange Sequenzen homogener Bits vermieden werden, wodurch der Resynchronisationsmechanismus effektiv arbeiten kann. Dadurch wird die zuverl\xe4ssige \xdcbertragung der Botschaft auch bei unterschiedlichen Taktraten und in Umgebungen mit elektrischen St\xf6rungen gew\xe4hrleistet."}),"\n",(0,r.jsx)(n.h2,{id:"kritische-betrachtung-und-wissenschaftliche-genauigkeit",children:"Kritische Betrachtung und wissenschaftliche Genauigkeit"}),"\n",(0,r.jsx)(n.p,{children:'Es ist wichtig zu beachten, dass die theoretische maximale Anzahl von Stuffbits selten in der Praxis erreicht wird, da Datenfelder typischerweise eine Mischung aus "0" und "1" enthalten. Dennoch bietet diese Worst-Case-Betrachtung wertvolle Einblicke in die Grenzen und Kapazit\xe4ten des CAN-Bus-Systems.'}),"\n",(0,r.jsx)(n.p,{children:"Ein weiterer Punkt, der wissenschaftlich betrachtet werden muss, ist die m\xf6gliche Verz\xf6gerung durch das Bitstuffing. Jede eingef\xfcgte Stuffbit verl\xe4ngert die \xdcbertragungszeit eines Frames geringf\xfcgig, was bei sehr zeitkritischen Anwendungen ber\xfccksichtigt werden muss."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>d});var t=i(96540);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);